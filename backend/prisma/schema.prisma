generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  telegramId          String               @unique
  username            String?
  firstName           String?
  lastName            String?
  status              UserStatus           @default(INTERVIEWER)
  role                UserRole             @default(USER)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  receivedInterviews  Interview[]          @relation("CandidateInterviews")
  conductedInterviews Interview[]          @relation("InterviewerInterviews")
  selectedProfessions SelectedProfession[]
  formData            UserFormData[]

  @@map("users")
}

model Interview {
  id                 String          @id @default(cuid())
  interviewerId      String
  candidateId        String
  status             InterviewStatus @default(PENDING)
  feedback           String?
  feedbackReceivedAt DateTime?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  candidate          User            @relation("CandidateInterviews", fields: [candidateId], references: [id], onDelete: Cascade)
  interviewer        User            @relation("InterviewerInterviews", fields: [interviewerId], references: [id], onDelete: Cascade)

  @@map("interviews")
}

model SelectedProfession {
  id         String   @id @default(cuid())
  userId     String
  profession String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("selected_professions")
}

model UserFormData {
  id         String   @id @default(cuid())
  userId     String
  profession String
  country    String
  experience String
  email      String?
  phone      String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_form_data")
}

enum UserStatus {
  INTERVIEWER
  CANDIDATE
}

enum UserRole {
  USER
  ADMIN
}

enum InterviewStatus {
  PENDING
  COMPLETED
  FEEDBACK_RECEIVED
}
