#!/usr/bin/env tsx

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npm run create-admin
 */

import { PrismaClient } from '@prisma/client';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const prisma = new PrismaClient();

const DEFAULT_ADMIN = {
  telegramId: '123456789', // –¢–µ—Å—Ç–æ–≤—ã–π Telegram ID
  username: 'admin',
  firstName: 'Admin',
  lastName: 'User',
};

async function createAdmin() {
  try {
    console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    const existingAdmin = await prisma.user.findUnique({
      where: { telegramId: DEFAULT_ADMIN.telegramId },
    });

    if (existingAdmin) {
      console.log(
        '‚ö†Ô∏è  –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å Telegram ID',
        DEFAULT_ADMIN.telegramId,
        '—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
      );
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const admin = await prisma.user.create({
      data: {
        telegramId: DEFAULT_ADMIN.telegramId,
        username: DEFAULT_ADMIN.username,
        firstName: DEFAULT_ADMIN.firstName,
        lastName: DEFAULT_ADMIN.lastName,
        status: 'INTERVIEWER', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é INTERVIEWER
      },
    });

    console.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
    console.log('üì± Telegram ID:', admin.telegramId);
    console.log('üë§ Username:', admin.username);
    console.log('üë§ –ò–º—è:', admin.firstName, admin.lastName);
    console.log('üÜî ID:', admin.id);
    console.log('üìÖ –°–æ–∑–¥–∞–Ω:', admin.createdAt);
    console.log('');
    console.log(
      '‚ö†Ô∏è  –í–ê–ñ–ù–û: –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π Telegram ID!'
    );
  } catch (error) {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

async function createAdminInteractive() {
  console.log('üîß –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
  console.log('');

  const readline = require('readline');
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  const question = (prompt: string): Promise<string> => {
    return new Promise((resolve) => {
      rl.question(prompt, resolve);
    });
  };

  try {
    const telegramId = await question('üì± Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ');
    const username = await question(
      'üë§ Username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): '
    );
    const firstName = await question('üë§ –ò–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ');
    const lastName = await question(
      'üë§ –§–∞–º–∏–ª–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): '
    );

    if (!telegramId || !firstName) {
      console.error('‚ùå Telegram ID –∏ –∏–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
      process.exit(1);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID
    const existingUser = await prisma.user.findUnique({
      where: { telegramId },
    });

    if (existingUser) {
      console.log('‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      console.log('üë§ –ò–º—è:', existingUser.firstName, existingUser.lastName);
      console.log('üÜî ID:', existingUser.id);
      return;
    }

    const admin = await prisma.user.create({
      data: {
        telegramId,
        username: username || undefined,
        firstName,
        lastName: lastName || undefined,
        status: 'INTERVIEWER',
      },
    });

    console.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
    console.log('üì± Telegram ID:', admin.telegramId);
    console.log('üë§ Username:', admin.username);
    console.log('üë§ –ò–º—è:', admin.firstName, admin.lastName);
    console.log('üÜî ID:', admin.id);
    console.log('üìÖ –°–æ–∑–¥–∞–Ω:', admin.createdAt);
  } catch (error) {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  } finally {
    rl.close();
    await prisma.$disconnect();
  }
}

async function checkAdminExists() {
  try {
    const users = await prisma.user.findMany({
      orderBy: { createdAt: 'desc' },
    });

    console.log('üëë –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', users.length);

    if (users.length > 0) {
      console.log('');
      users.forEach((user, index) => {
        console.log(`${index + 1}. ${user.firstName} ${user.lastName || ''}`);
        console.log(`   üì± Telegram ID: ${user.telegramId}`);
        console.log(`   üë§ Username: ${user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
        console.log(`   üÜî ID: ${user.id}`);
        console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${user.status}`);
        console.log(`   üìÖ –°–æ–∑–¥–∞–Ω: ${user.createdAt.toLocaleString()}`);
        console.log('');
      });
    } else {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const command = process.argv[2];

switch (command) {
  case 'interactive':
  case '-i':
    createAdminInteractive();
    break;
  case 'check':
  case '-c':
    checkAdminExists();
    break;
  case 'help':
  case '-h':
    console.log('üîß –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏');
    console.log('');
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
    console.log(
      '  npm run create-admin                  - –°–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'
    );
    console.log(
      '  npm run create-admin interactive      - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
    );
    console.log(
      '  npm run create-admin check            - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
    );
    console.log(
      '  npm run create-admin help             - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É'
    );
    break;
  default:
    createAdmin();
}
