import { TelegramUtils } from '../utils/telegram.js';
import { JwtUtils } from '../utils/jwt.js';
import { UserService } from './userService.js';
export class AuthService {
    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    static async registerUser(data) {
        try {
            const userResult = await UserService.createUser(data);
            if (!userResult.success || !userResult.data) {
                return {
                    success: false,
                    error: userResult.error,
                };
            }
            const token = JwtUtils.generateExtendedToken(userResult.data, 'email');
            return {
                success: true,
                data: {
                    token,
                    user: userResult.data,
                },
                message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ',
            };
        }
        catch (error) {
            console.error('Registration error:', error);
            return {
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
            };
        }
    }
    /**
     * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ email/password
     */
    static async loginWithEmail(credentials) {
        try {
            const userResult = await UserService.authenticateUser(credentials);
            if (!userResult.success || !userResult.data) {
                return {
                    success: false,
                    error: userResult.error,
                };
            }
            const token = JwtUtils.generateExtendedToken(userResult.data, 'email');
            return {
                success: true,
                data: {
                    token,
                    user: userResult.data,
                },
                message: '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞',
            };
        }
        catch (error) {
            console.error('Email login error:', error);
            return {
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
            };
        }
    }
    /**
     * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram Web App
     */
    static async authenticateWithTelegram(initData) {
        try {
            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram
            const webAppData = TelegramUtils.validateWebAppData(initData);
            if (!webAppData) {
                return {
                    success: false,
                    error: 'Invalid Telegram Web App data',
                };
            }
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –ª–∏ –¥–∞–Ω–Ω—ã–µ
            if (TelegramUtils.isDataExpired(webAppData.auth_date)) {
                return {
                    success: false,
                    error: 'Telegram data has expired',
                };
            }
            const telegramUser = webAppData.user;
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±–æ—Ç
            if (telegramUser.is_bot) {
                return {
                    success: false,
                    error: 'Bots are not allowed to authenticate',
                };
            }
            // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            const userResult = await UserService.findOrCreateTelegramUser({
                id: telegramUser.id,
                username: telegramUser.username,
                firstName: telegramUser.first_name,
                lastName: telegramUser.last_name,
            });
            if (!userResult.success || !userResult.data) {
                return {
                    success: false,
                    error: userResult.error || 'Failed to create/find user',
                };
            }
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
            const token = JwtUtils.generateExtendedToken(userResult.data, 'telegram');
            return {
                success: true,
                data: {
                    token,
                    user: userResult.data,
                },
                message: 'Authentication successful',
            };
        }
        catch (error) {
            console.error('Authentication error:', error);
            return {
                success: false,
                error: 'Authentication failed',
            };
        }
    }
    /**
     * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram Login Widget
     */
    static async authenticateWithTelegramWidget(widgetData) {
        try {
            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram Widget
            const isValid = TelegramUtils.validateWidgetData(widgetData);
            if (!isValid) {
                return {
                    success: false,
                    error: 'Invalid Telegram Widget data',
                };
            }
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –ª–∏ –¥–∞–Ω–Ω—ã–µ (5 –º–∏–Ω—É—Ç)
            const currentTime = Math.floor(Date.now() / 1000);
            const fiveMinutes = 5 * 60;
            if (currentTime - widgetData.auth_date > fiveMinutes) {
                return {
                    success: false,
                    error: 'Telegram data has expired',
                };
            }
            // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            const userResult = await UserService.findOrCreateTelegramUser({
                id: widgetData.id,
                username: widgetData.username,
                firstName: widgetData.first_name,
                lastName: widgetData.last_name,
            });
            if (!userResult.success || !userResult.data) {
                return {
                    success: false,
                    error: userResult.error || 'Failed to create/find user',
                };
            }
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
            const token = JwtUtils.generateExtendedToken(userResult.data, 'telegram');
            return {
                success: true,
                data: {
                    token,
                    user: userResult.data,
                },
                message: 'Authentication successful',
            };
        }
        catch (error) {
            console.error('Telegram Widget authentication error:', error);
            return {
                success: false,
                error: 'Authentication failed',
            };
        }
    }
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
     */
    static async getTestToken() {
        try {
            // –í –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–µ –Ω–µ –≤—ã–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
            if (process.env.NODE_ENV === 'production') {
                return {
                    success: false,
                    error: 'Test tokens are not available in production',
                };
            }
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const userResult = await UserService.findOrCreateTelegramUser({
                id: 123456789,
                username: 'testuser',
                firstName: 'Test',
                lastName: 'User',
            });
            if (!userResult.success || !userResult.data) {
                return {
                    success: false,
                    error: userResult.error || 'Failed to create test user',
                };
            }
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const token = JwtUtils.generateExtendedToken(userResult.data, 'telegram');
            return {
                success: true,
                data: {
                    token,
                    user: userResult.data,
                },
                message: 'Test token generated successfully',
            };
        }
        catch (error) {
            console.error('Test token generation error:', error);
            return {
                success: false,
                error: 'Failed to generate test token',
            };
        }
    }
    /**
     * –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç JWT —Ç–æ–∫–µ–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    static verifyToken(token) {
        try {
            const payload = JwtUtils.verifyToken(token);
            if (!payload) {
                return {
                    success: false,
                    error: 'Invalid or expired token',
                };
            }
            const user = {
                id: payload.userId,
                is_bot: false,
                first_name: payload.firstName,
                last_name: payload.lastName,
                username: payload.username,
            };
            return {
                success: true,
                data: user,
                message: 'Token verified successfully',
            };
        }
        catch (error) {
            console.error('Token verification error:', error);
            return {
                success: false,
                error: 'Token verification failed',
            };
        }
    }
    /**
     * –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π JWT —Ç–æ–∫–µ–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    static async verifyExtendedToken(token) {
        try {
            console.log('üîç verifyExtendedToken called with token:', token.substring(0, 20) + '...');
            console.log('üîç token length:', token.length);
            console.log('üîç token format check:', {
                isJWT: token.split('.').length === 3,
                parts: token.split('.').length,
            });
            const payload = JwtUtils.verifyExtendedToken(token);
            console.log('üîç JWT payload:', payload);
            if (!payload) {
                console.log('‚ùå JWT verification failed - no payload');
                return {
                    success: false,
                    error: 'Invalid or expired token',
                };
            }
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º userDbId –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            let userResult;
            if (payload.userDbId) {
                // –ï—Å–ª–∏ –µ—Å—Ç—å userDbId, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                console.log('üîç Using userDbId:', payload.userDbId);
                userResult = await UserService.getUserById(payload.userDbId);
            }
            else if (payload.authType === 'email') {
                // –î–ª—è email –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–µ–∑ userDbId (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
                console.log('üîç Using userId for email auth:', payload.userId);
                userResult = await UserService.getUserById(payload.userId);
            }
            else if (payload.authType === 'telegram') {
                // –î–ª—è Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–µ–∑ userDbId (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
                console.log('üîç Using telegramId:', payload.userId);
                userResult = await UserService.getUserByTelegramId(payload.userId.toString());
            }
            else {
                console.log('‚ùå Invalid token format - no valid auth type or userDbId');
                return {
                    success: false,
                    error: 'Invalid token format',
                };
            }
            console.log('üîç UserService result:', userResult);
            if (!userResult.success || !userResult.data) {
                console.log('‚ùå User not found:', userResult.error);
                console.log('‚ùå UserService response:', userResult);
                return {
                    success: false,
                    error: 'User not found',
                };
            }
            console.log('‚úÖ User found:', userResult.data.id);
            return {
                success: true,
                data: userResult.data,
                message: 'Token verified successfully',
            };
        }
        catch (error) {
            console.error('‚ùå Extended token verification error:', error);
            return {
                success: false,
                error: 'Token verification failed',
            };
        }
    }
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ Telegram API
     */
    static async refreshUserInfo(userId) {
        try {
            const userInfo = await TelegramUtils.getUserInfo(userId);
            if (!userInfo) {
                return {
                    success: false,
                    error: 'Failed to fetch user info from Telegram',
                };
            }
            return {
                success: true,
                data: userInfo,
                message: 'User info refreshed successfully',
            };
        }
        catch (error) {
            console.error('User info refresh error:', error);
            return {
                success: false,
                error: 'Failed to refresh user info',
            };
        }
    }
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    static generateTokenForUser(user) {
        return JwtUtils.generateToken(user);
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –ª–∏ —Ç–æ–∫–µ–Ω
     */
    static isTokenValid(token) {
        return !JwtUtils.isTokenExpired(token);
    }
    /**
     * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
     */
    static async createDevUser(data) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            if (process.env.NODE_ENV === 'production') {
                return {
                    success: false,
                    error: 'Dev user creation is not allowed in production',
                };
            }
            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ UserService
            const userResult = await UserService.findOrCreateTelegramUser({
                id: data.telegramId,
                username: data.username,
                firstName: data.firstName,
                lastName: data.lastName,
            });
            if (!userResult.success || !userResult.data) {
                return {
                    success: false,
                    error: userResult.error || 'Failed to create dev user',
                };
            }
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
            const token = JwtUtils.generateExtendedToken(userResult.data, 'telegram');
            return {
                success: true,
                data: {
                    token,
                    user: userResult.data,
                },
                message: 'Dev user created successfully',
            };
        }
        catch (error) {
            console.error('Create dev user error:', error);
            return {
                success: false,
                error: 'Failed to create dev user',
            };
        }
    }
}
//# sourceMappingURL=authService.js.map