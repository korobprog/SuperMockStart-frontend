import prisma from './prisma.js';
import { UserStatus } from '../types/index.js';
export class UserService {
    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
     */
    static async findOrCreateTelegramUser(telegramData) {
        try {
            const telegramId = telegramData.id.toString();
            // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            let user = await prisma.users.findUnique({
                where: { telegramId },
            });
            if (user) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = await prisma.users.update({
                    where: { id: user.id },
                    data: {
                        username: telegramData.username || user.username,
                        firstName: telegramData.firstName || user.firstName,
                        lastName: telegramData.lastName || user.lastName,
                    },
                });
                const userResponse = {
                    id: user.id,
                    telegramId: user.telegramId,
                    username: user.username,
                    firstName: user.firstName,
                    lastName: user.lastName,
                    status: user.status,
                    role: user.role,
                    createdAt: user.createdAt,
                    updatedAt: user.updatedAt,
                };
                return {
                    success: true,
                    data: userResponse,
                    message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω',
                };
            }
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const newUser = await prisma.users.create({
                data: {
                    id: `user-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
                    telegramId,
                    username: telegramData.username,
                    firstName: telegramData.firstName,
                    lastName: telegramData.lastName,
                    status: UserStatus.INTERVIEWER,
                    updatedAt: new Date(),
                },
            });
            const userResponse = {
                id: newUser.id,
                telegramId: newUser.telegramId,
                username: newUser.username,
                firstName: newUser.firstName,
                lastName: newUser.lastName,
                status: newUser.status,
                role: newUser.role,
                createdAt: newUser.createdAt,
                updatedAt: newUser.updatedAt,
            };
            return {
                success: true,
                data: userResponse,
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω',
            };
        }
        catch (error) {
            console.error('Telegram user find/create error:', error);
            return {
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º Telegram',
            };
        }
    }
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
     */
    static async getUserById(id) {
        try {
            console.log('üîç getUserById called with id:', id);
            console.log('üîç id type:', typeof id);
            console.log('üîç id.toString():', id.toString());
            const user = await prisma.users.findUnique({
                where: { id: id.toString() },
            });
            console.log('üîç Database query result:', user);
            if (!user) {
                console.log('‚ùå User not found in database');
                return {
                    success: false,
                    error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
                };
            }
            const userResponse = {
                id: user.id,
                telegramId: user.telegramId,
                username: user.username,
                firstName: user.firstName,
                lastName: user.lastName,
                status: user.status,
                role: user.role,
                createdAt: user.createdAt,
                updatedAt: user.updatedAt,
            };
            console.log('‚úÖ User found and converted:', userResponse);
            return {
                success: true,
                data: userResponse,
            };
        }
        catch (error) {
            console.error('‚ùå Get user by ID error:', error);
            return {
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            };
        }
    }
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
     */
    static async getUserByTelegramId(telegramId) {
        try {
            const user = await prisma.users.findUnique({
                where: { telegramId },
            });
            if (!user) {
                return {
                    success: false,
                    error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
                };
            }
            const userResponse = {
                id: user.id,
                telegramId: user.telegramId,
                username: user.username,
                firstName: user.firstName,
                lastName: user.lastName,
                status: user.status,
                role: user.role,
                createdAt: user.createdAt,
                updatedAt: user.updatedAt,
            };
            return {
                success: true,
                data: userResponse,
            };
        }
        catch (error) {
            console.error('Get user by Telegram ID error:', error);
            return {
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            };
        }
    }
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    static async updateUserStatus(userId, status) {
        try {
            const user = await prisma.users.update({
                where: { id: userId },
                data: { status },
            });
            const userResponse = {
                id: user.id,
                telegramId: user.telegramId,
                username: user.username,
                firstName: user.firstName,
                lastName: user.lastName,
                status: user.status,
                role: user.role,
                createdAt: user.createdAt,
                updatedAt: user.updatedAt,
            };
            return {
                success: true,
                data: userResponse,
                message: '–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω',
            };
        }
        catch (error) {
            console.error('Update user status error:', error);
            return {
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            };
        }
    }
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
     */
    static async updateUserStatusByTelegramId({ telegramId, status, }) {
        try {
            const user = await prisma.users.update({
                where: { telegramId },
                data: { status },
            });
            const userResponse = {
                id: user.id,
                telegramId: user.telegramId,
                username: user.username,
                firstName: user.firstName,
                lastName: user.lastName,
                status: user.status,
                role: user.role,
                createdAt: user.createdAt,
                updatedAt: user.updatedAt,
            };
            return {
                success: true,
                data: userResponse,
                message: '–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω',
            };
        }
        catch (error) {
            console.error('Update user status by Telegram ID error:', error);
            return {
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            };
        }
    }
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    static async getAllUsers() {
        try {
            const users = await prisma.users.findMany({
                orderBy: { createdAt: 'desc' },
            });
            const usersResponse = users.map((user) => ({
                id: user.id,
                telegramId: user.telegramId,
                username: user.username,
                firstName: user.firstName,
                lastName: user.lastName,
                status: user.status,
                role: user.role,
                createdAt: user.createdAt,
                updatedAt: user.updatedAt,
            }));
            return {
                success: true,
                data: usersResponse,
            };
        }
        catch (error) {
            console.error('Get all users error:', error);
            return {
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
            };
        }
    }
    /**
     * –£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    static async deleteUser(userId) {
        try {
            await prisma.users.delete({
                where: { id: userId },
            });
            return {
                success: true,
                data: true,
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω',
            };
        }
        catch (error) {
            console.error('Delete user error:', error);
            return {
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            };
        }
    }
    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    static async createUser(userData) {
        try {
            // This is a placeholder implementation
            // You'll need to implement actual user creation logic
            return {
                success: false,
                error: 'User creation not implemented',
            };
        }
        catch (error) {
            console.error('Create user error:', error);
            return {
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            };
        }
    }
    /**
     * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    static async authenticateUser(credentials) {
        try {
            // This is a placeholder implementation
            // You'll need to implement actual authentication logic
            return {
                success: false,
                error: 'Authentication not implemented',
            };
        }
        catch (error) {
            console.error('Authenticate user error:', error);
            return {
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
            };
        }
    }
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    static async updatePassword(userId, oldPassword, newPassword) {
        try {
            // This is a placeholder implementation
            // You'll need to implement actual password update logic
            return {
                success: false,
                error: 'Password update not implemented',
            };
        }
        catch (error) {
            console.error('Update password error:', error);
            return {
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è',
            };
        }
    }
    /**
     * –°–≤—è–∑—ã–≤–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç —Å Telegram
     */
    static async linkTelegramAccount(userId, telegramId, userData) {
        try {
            const user = await prisma.users.update({
                where: { id: userId },
                data: { telegramId },
            });
            const userResponse = {
                id: user.id,
                telegramId: user.telegramId,
                username: user.username,
                firstName: user.firstName,
                lastName: user.lastName,
                status: user.status,
                role: user.role, // Add role property
                createdAt: user.createdAt,
                updatedAt: user.updatedAt,
            };
            return {
                success: true,
                data: userResponse,
                message: 'Telegram –∞–∫–∫–∞—É–Ω—Ç —Å–≤—è–∑–∞–Ω',
            };
        }
        catch (error) {
            console.error('Link Telegram account error:', error);
            return {
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞',
            };
        }
    }
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤—å—é
     */
    static async createInterview(interviewerId, candidateId) {
        try {
            // This is a placeholder implementation
            // You'll need to implement actual interview creation logic
            return {
                success: false,
                error: 'Interview creation not implemented',
            };
        }
        catch (error) {
            console.error('Create interview error:', error);
            return {
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é',
            };
        }
    }
    /**
     * –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤—å—é
     */
    static async completeInterview(interviewId) {
        try {
            // This is a placeholder implementation
            // You'll need to implement actual interview completion logic
            return {
                success: false,
                error: 'Interview completion not implemented',
            };
        }
        catch (error) {
            console.error('Complete interview error:', error);
            return {
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é',
            };
        }
    }
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç–∑—ã–≤ –∫ –∏–Ω—Ç–µ—Ä–≤—å—é
     */
    static async addInterviewFeedback(interviewId, feedback) {
        try {
            // This is a placeholder implementation
            // You'll need to implement actual feedback logic
            return {
                success: false,
                error: 'Feedback not implemented',
            };
        }
        catch (error) {
            console.error('Add interview feedback error:', error);
            return {
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞',
            };
        }
    }
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
     */
    static async getAvailableCandidates() {
        try {
            const candidates = await prisma.users.findMany({
                where: { status: UserStatus.CANDIDATE },
                orderBy: { createdAt: 'desc' },
            });
            const candidatesResponse = candidates.map((user) => ({
                id: user.id,
                telegramId: user.telegramId,
                username: user.username,
                firstName: user.firstName,
                lastName: user.lastName,
                status: user.status,
                role: user.role, // Add role property
                createdAt: user.createdAt,
                updatedAt: user.updatedAt,
            }));
            return {
                success: true,
                data: candidatesResponse,
            };
        }
        catch (error) {
            console.error('Get available candidates error:', error);
            return {
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤',
            };
        }
    }
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    static async getUserInterviews(userId) {
        try {
            // This is a placeholder implementation
            // You'll need to implement actual interview retrieval logic
            return {
                success: false,
                error: 'Get user interviews not implemented',
            };
        }
        catch (error) {
            console.error('Get user interviews error:', error);
            return {
                success: false,
                error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            };
        }
    }
}
//# sourceMappingURL=userService.js.map