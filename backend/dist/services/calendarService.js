import prisma from './prisma.js';
import pkg from '@prisma/client';
const { QueueType, QueueStatus, SessionStatus, NotificationType } = pkg;
import { v4 as uuidv4 } from 'uuid';
export class CalendarService {
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
     */
    static async getAvailableSlots(profession, date) {
        try {
            console.log('üîç CalendarService.getAvailableSlots called with:', {
                profession,
                date,
            });
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            console.log('üîç Testing database connection...');
            await prisma.$queryRaw `SELECT 1`;
            console.log('‚úÖ Database connection successful');
            const startDate = date || new Date();
            const endDate = new Date(startDate);
            endDate.setDate(endDate.getDate() + 14); // –ù–∞ 2 –Ω–µ–¥–µ–ª–∏ –≤–ø–µ—Ä–µ–¥
            console.log('üîç Date range:', { startDate, endDate });
            // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Å—Å–∏–∏
            const existingSessions = await prisma.interview_sessions.findMany({
                where: {
                    profession,
                    scheduledDateTime: {
                        gte: startDate,
                        lte: endDate,
                    },
                    status: {
                        in: ['SCHEDULED', 'IN_PROGRESS'],
                    },
                },
                select: {
                    scheduledDateTime: true,
                },
            });
            console.log('üîç Existing sessions found:', existingSessions.length);
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã (–∫–∞–∂–¥—ã–π —á–∞—Å 24/7)
            const slots = [];
            const current = new Date(startDate);
            current.setHours(0, 0, 0, 0);
            while (current <= endDate) {
                // –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ - –¥–æ—Å—Ç—É–ø–Ω–æ 7 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é
                // –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è - –¥–æ—Å—Ç—É–ø–Ω–æ 24 —á–∞—Å–∞ –≤ —Å—É—Ç–∫–∏
                for (let hour = 0; hour < 24; hour++) {
                    current.setHours(hour, 0, 0, 0);
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ—Ç –Ω–µ –∑–∞–Ω—è—Ç
                    const isOccupied = existingSessions.some((session) => Math.abs(session.scheduledDateTime.getTime() - current.getTime()) <
                        60 * 60 * 1000 // –í –ø—Ä–µ–¥–µ–ª–∞—Ö —á–∞—Å–∞
                    );
                    if (!isOccupied) {
                        slots.push({
                            datetime: new Date(current),
                            available: true,
                        });
                    }
                }
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é
                current.setDate(current.getDate() + 1);
            }
            console.log('üîç Generated slots:', slots.length);
            return slots;
        }
        catch (error) {
            console.error('‚ùå Error in getAvailableSlots:', error);
            throw error;
        }
    }
    /**
     * –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥—å
     */
    static async joinQueue(data) {
        // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
        await this.leaveQueue(data.userId);
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –æ—á–µ—Ä–µ–¥—å
        const queueEntry = await prisma.interview_queue.create({
            data: {
                id: uuidv4(),
                userId: data.userId,
                profession: data.profession,
                language: data.language,
                preferredDateTime: data.preferredDateTime,
                queueType: data.queueType,
                timeFlexibility: data.timeFlexibility || 30,
                status: QueueStatus.WAITING,
                updatedAt: new Date(),
            },
            include: {
                users: true,
            },
        });
        return queueEntry;
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥–∏
     */
    static async getQueueStatus(userId) {
        const queueEntry = await prisma.interview_queue.findFirst({
            where: {
                userId,
                status: {
                    in: [
                        QueueStatus.WAITING,
                        QueueStatus.MATCHED,
                    ],
                },
            },
            include: {
                users: true,
                interview_sessions: {
                    include: {
                        users_interview_sessions_candidateIdTousers: true,
                        users_interview_sessions_interviewerIdTousers: true,
                    },
                },
            },
            orderBy: {
                createdAt: 'desc',
            },
        });
        if (!queueEntry) {
            return null;
        }
        // –ï—Å–ª–∏ –µ—Å—Ç—å –º–∞—Ç—á, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
        if (queueEntry.interview_sessions) {
            return {
                id: queueEntry.id,
                status: 'MATCHED',
                profession: queueEntry.profession,
                language: queueEntry.language,
                preferredDateTime: queueEntry.preferredDateTime,
                matchedSession: {
                    id: queueEntry.interview_sessions.id,
                    scheduledDateTime: queueEntry.interview_sessions.scheduledDateTime,
                    meetingLink: queueEntry.interview_sessions.meetingLink,
                    profession: queueEntry.interview_sessions.profession,
                    language: queueEntry.interview_sessions.language,
                    candidate: queueEntry.interview_sessions
                        .users_interview_sessions_candidateIdTousers,
                    interviewer: queueEntry.interview_sessions
                        .users_interview_sessions_interviewerIdTousers,
                },
            };
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏ —Å —Ç–µ–º –∂–µ —è–∑—ã–∫–æ–º
        const usersInQueueWithSameLanguage = await prisma.interview_queue.count({
            where: {
                language: queueEntry.language,
                status: QueueStatus.WAITING,
            },
        });
        return {
            id: queueEntry.id,
            status: 'WAITING',
            profession: queueEntry.profession,
            language: queueEntry.language,
            preferredDateTime: queueEntry.preferredDateTime,
            usersInQueueWithSameLanguage,
        };
    }
    /**
     * –ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å
     */
    static async leaveQueue(userId) {
        await prisma.interview_queue.updateMany({
            where: {
                userId,
                status: {
                    in: [
                        QueueStatus.WAITING,
                        QueueStatus.MATCHED,
                    ],
                },
            },
            data: {
                status: QueueStatus.CANCELLED,
            },
        });
    }
    /**
     * –°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –∏–∑ –º–∞—Ç—á–∞
     */
    static async createInterviewSession(match) {
        const meetingLink = this.generateMeetingLink();
        // –°–æ–∑–¥–∞–µ–º Interview –∑–∞–ø–∏—Å–∏
        const candidateInterview = await prisma.interviews.create({
            data: {
                id: uuidv4(),
                candidateId: match.candidateEntry.userId,
                interviewerId: match.interviewerEntry.userId,
                updatedAt: new Date(),
            },
        });
        // –°–æ–∑–¥–∞–µ–º InterviewSession
        const session = await prisma.interview_sessions.create({
            data: {
                id: uuidv4(),
                interviewId: candidateInterview.id,
                scheduledDateTime: match.scheduledDateTime,
                profession: match.candidateEntry.profession,
                language: match.candidateEntry.language,
                meetingLink,
                candidateId: match.candidateEntry.userId,
                interviewerId: match.interviewerEntry.userId,
                updatedAt: new Date(),
            },
            include: {
                users_interview_sessions_candidateIdTousers: true,
                users_interview_sessions_interviewerIdTousers: true,
            },
        });
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–µ–π
        await prisma.interview_queue.updateMany({
            where: {
                id: {
                    in: [match.candidateEntry.id, match.interviewerEntry.id],
                },
            },
            data: {
                status: QueueStatus.MATCHED,
                matchedSessionId: session.id,
            },
        });
        return session;
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    static async getUserSessions(userId) {
        try {
            console.log('üîç CalendarService.getUserSessions called with userId:', userId);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            console.log('üîç Testing database connection...');
            await prisma.$queryRaw `SELECT 1`;
            console.log('‚úÖ Database connection successful');
            const sessions = await prisma.interview_sessions.findMany({
                where: {
                    OR: [{ candidateId: userId }, { interviewerId: userId }],
                },
                include: {
                    users_interview_sessions_candidateIdTousers: true,
                    users_interview_sessions_interviewerIdTousers: true,
                    interviews: true,
                },
                orderBy: {
                    scheduledDateTime: 'asc',
                },
            });
            console.log('üîç Found sessions:', sessions.length);
            return sessions;
        }
        catch (error) {
            console.error('‚ùå Error in getUserSessions:', error);
            throw error;
        }
    }
    /**
     * –û—Ç–º–µ–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é
     */
    static async cancelSession(sessionId, userId) {
        const session = await prisma.interview_sessions.findFirst({
            where: {
                id: sessionId,
                OR: [{ candidateId: userId }, { interviewerId: userId }],
            },
        });
        if (!session) {
            throw new Error('Session not found or access denied');
        }
        await prisma.interview_sessions.update({
            where: { id: sessionId },
            data: { status: 'CANCELLED' },
        });
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω
        const otherUserId = session.candidateId === userId
            ? session.interviewerId
            : session.candidateId;
        await prisma.notifications.create({
            data: {
                id: uuidv4(),
                userId: otherUserId,
                sessionId: sessionId,
                type: NotificationType.INTERVIEW_CANCELLED,
                title: '–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',
                message: '–í–∞—à–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω–æ–π.',
            },
        });
    }
    /**
     * –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é
     */
    static async completeSession(sessionId, userId) {
        const session = await prisma.interview_sessions.findFirst({
            where: {
                id: sessionId,
                OR: [{ candidateId: userId }, { interviewerId: userId }],
            },
        });
        if (!session) {
            throw new Error('Session not found or access denied');
        }
        await prisma.interview_sessions.update({
            where: { id: sessionId },
            data: { status: 'COMPLETED' },
        });
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –æ–±–æ–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        await prisma.interview_queue.updateMany({
            where: {
                OR: [
                    { userId: session.candidateId },
                    { userId: session.interviewerId },
                ],
                status: QueueStatus.MATCHED,
                matchedSessionId: sessionId,
            },
            data: {
                status: QueueStatus.CANCELLED,
                matchedSessionId: null,
            },
        });
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –¥–ª—è –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω
        await this.createFeedbackRequest(sessionId);
    }
    /**
     * –°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
     */
    static async createFeedbackRequest(sessionId) {
        const session = await prisma.interview_sessions.findUnique({
            where: { id: sessionId },
            include: {
                users_interview_sessions_candidateIdTousers: true,
                users_interview_sessions_interviewerIdTousers: true,
            },
        });
        if (!session)
            return;
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ —Ñ–∏–¥–±–µ–∫–∞
        await prisma.notifications.createMany({
            data: [
                {
                    id: uuidv4(),
                    userId: session.candidateId,
                    sessionId: sessionId,
                    type: NotificationType.FEEDBACK_REQUEST,
                    title: '–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤',
                    message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ –ø—Ä–æ—à–µ–¥—à–µ–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏.',
                },
                {
                    id: uuidv4(),
                    userId: session.interviewerId,
                    sessionId: sessionId,
                    type: NotificationType.FEEDBACK_REQUEST,
                    title: '–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤',
                    message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ –ø—Ä–æ—à–µ–¥—à–µ–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏.',
                },
            ],
        });
    }
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Å—Ç—Ä–µ—á—É
     */
    static generateMeetingLink() {
        const meetingId = uuidv4();
        return `https://meet.jit.si/supermock-${meetingId}`;
    }
}
//# sourceMappingURL=calendarService.js.map