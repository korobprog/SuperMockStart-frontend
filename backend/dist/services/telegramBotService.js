import TelegramBot from 'node-telegram-bot-api';
export class TelegramBotService {
    static bot = null;
    static botToken = '';
    static pendingAuths = new Map();
    static initialize(token) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –±–æ—Ç
        if (this.bot) {
            console.log('ü§ñ Telegram bot already initialized, skipping...');
            return;
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
        if (!token || token.trim() === '') {
            console.error('‚ùå Telegram token is empty or invalid');
            return;
        }
        console.log('ü§ñ Initializing Telegram bot...');
        console.log(`  - Environment: ${process.env.NODE_ENV || 'development'}`);
        console.log(`  - Token length: ${token.length}`);
        console.log(`  - Bot username: ${process.env.BOT_USERNAME || 'unknown'}`);
        this.botToken = token;
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º webhook –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ, polling –≤ development
        const isDevelopment = process.env.NODE_ENV === 'development';
        if (isDevelopment) {
            // –í development —Å–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –±–µ–∑ polling –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
            this.bot = new TelegramBot(token, {
                polling: false,
                webHook: false,
            });
            console.log('ü§ñ Telegram bot initialized in development mode (no polling)');
            console.log('‚ö†Ô∏è  Note: Bot polling disabled in development to avoid conflicts');
            console.log('üì± Messages will be sent via direct API calls only');
        }
        else {
            // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º webhook
            this.bot = new TelegramBot(token, {
                polling: false,
                webHook: {
                    port: 8443,
                    host: '0.0.0.0',
                },
            });
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è webhook
            if (this.bot) {
                this.bot.on('message', async (msg) => {
                    console.log('üì± Received message via webhook:', {
                        chatId: msg.chat.id,
                        userId: msg.from?.id,
                        text: msg.text,
                    });
                    if (msg.text && msg.text.startsWith('/start')) {
                        console.log('üîê Processing /start command via webhook');
                        await this.handleStartCommand(msg);
                    }
                });
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
                this.bot.on('error', (error) => {
                    console.error('ü§ñ Telegram bot error:', error);
                    // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –±–æ—Ç–∞
                });
                console.log('ü§ñ Telegram bot started in webhook mode (production)');
            }
        }
    }
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ Telegram Bot API
     */
    static async getUserInfo(userId) {
        try {
            if (!this.bot) {
                throw new Error('Bot not initialized');
            }
            // –í–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º
            return {
                id: userId,
                is_bot: false,
                first_name: 'User',
                last_name: undefined,
                username: undefined,
                language_code: undefined,
                photo_url: undefined,
            };
        }
        catch (error) {
            console.error('Error getting user info:', error);
            return null;
        }
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    static async sendMessage(userId, message) {
        try {
            if (!this.bot) {
                throw new Error('Bot not initialized');
            }
            await this.bot.sendMessage(userId, message);
            return true;
        }
        catch (error) {
            console.error('Error sending message:', error);
            return false;
        }
    }
    /**
     * –°–æ–∑–¥–∞–µ—Ç LoginUrl –æ–±—ä–µ–∫—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram Login Widget
     */
    static createLoginUrl(userId, redirectUrl) {
        const botUsername = process.env.BOT_USERNAME || 'SuperMock_bot';
        const authId = `${userId}_${Date.now()}`;
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ pending –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        this.pendingAuths.set(authId, { userId, timestamp: Date.now() });
        const isDevelopment = process.env.NODE_ENV === 'development';
        console.log(`üîó Created LoginUrl for user ${userId} with auth ID: ${authId} (${isDevelopment ? 'dev mode' : 'production mode'})`);
        // –°–æ–∑–¥–∞–µ–º LoginUrl –æ–±—ä–µ–∫—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Telegram Bot API
        const loginUrl = {
            url: `${redirectUrl}?auth_id=${authId}`,
            forward_text: '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ SuperMock',
            bot_username: botUsername,
            request_write_access: true,
        };
        return loginUrl;
    }
    /**
     * –°–æ–∑–¥–∞–µ—Ç URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
     */
    static createAuthUrl(userId, redirectUrl) {
        const botUsername = process.env.BOT_USERNAME || 'SuperMock_bot';
        const authId = `${userId}_${Date.now()}`;
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ pending –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        this.pendingAuths.set(authId, { userId, timestamp: Date.now() });
        const isDevelopment = process.env.NODE_ENV === 'development';
        console.log(`üîó Created auth URL for user ${userId} with auth ID: ${authId} (${isDevelopment ? 'dev mode' : 'production mode'})`);
        console.log(`üìã Current pending auths after creation:`, Array.from(this.pendingAuths.entries()));
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è Telegram Login Widget
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Telegram Login Widget
        const baseUrl = `https://t.me/${botUsername}`;
        const authUrl = `${baseUrl}?start=auth_${authId}`;
        return authUrl;
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç pending –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
     */
    static async checkPendingAuth(authId) {
        console.log(`üîç Checking pending auth for ID: ${authId}`);
        console.log(`üìã Current pending auths:`, Array.from(this.pendingAuths.entries()));
        const auth = this.pendingAuths.get(authId);
        if (!auth) {
            console.log(`‚ùå Auth ID ${authId} not found in pending auths`);
            return null;
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–µ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç
        const currentTime = Date.now();
        const fiveMinutes = 5 * 60 * 1000;
        if (currentTime - auth.timestamp > fiveMinutes) {
            console.log(`‚è∞ Auth ID ${authId} expired (older than 5 minutes)`);
            this.pendingAuths.delete(authId);
            return null;
        }
        console.log(`‚úÖ Auth ID ${authId} is valid, checking if bot can send message to user ${auth.userId}`);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const canSendMessage = await this.canSendMessage(auth.userId);
        if (canSendMessage) {
            console.log(`‚úÖ Bot can send message to user ${auth.userId}, auth successful`);
            this.pendingAuths.delete(authId);
            // –í dev —Ä–µ–∂–∏–º–µ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            const isDevelopment = process.env.NODE_ENV === 'development';
            if (isDevelopment) {
                console.log(`üîß Dev mode: returning valid auth result for user ${auth.userId}`);
            }
            return { userId: auth.userId, valid: true };
        }
        console.log(`‚ùå Bot cannot send message to user ${auth.userId}`);
        return { userId: auth.userId, valid: false };
    }
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    static async handleStartCommand(msg) {
        try {
            if (!this.bot) {
                throw new Error('Bot not initialized');
            }
            const chatId = msg.chat.id;
            const text = msg.text || '';
            const user = msg.from;
            if (!user) {
                await this.bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ');
                return;
            }
            const userName = user.first_name || user.username || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
            console.log(`üì± Received /start command from user ${user.id} (${userName})`);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if (text.startsWith('/start auth_')) {
                const authId = text.replace('/start auth_', '');
                console.log(`üîê Processing auth request with ID: ${authId}`);
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º pending –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                const authResult = await this.checkPendingAuth(authId);
                if (authResult && authResult.valid) {
                    // –í dev —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
                    const isDevelopment = process.env.NODE_ENV === 'development';
                    if (isDevelopment) {
                        // –í dev —Ä–µ–∂–∏–º–µ –≤—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é, –µ—Å–ª–∏ –±–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
                        const userName = user.first_name || user.username || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                        console.log(`‚úÖ Dev mode: allowing auth for user ${user.id} (${userName})`);
                        await this.bot.sendMessage(chatId, `‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userName}!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ SuperMock.\n\nüåê –°—Ä–µ–¥–∞: development\n‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã`);
                        console.log(`User ${user.id} (${userName}) authenticated via bot (dev mode)`);
                    }
                    else {
                        // –í production —Ä–µ–∂–∏–º–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        if (authResult.userId === user.id) {
                            const userName = user.first_name || user.username || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                            await this.bot.sendMessage(chatId, `‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userName}!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ SuperMock.\n\nüåê –°—Ä–µ–¥–∞: production\n‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è`);
                            console.log(`User ${user.id} (${userName}) authenticated via bot`);
                        }
                        else {
                            console.log(`‚ùå User ID mismatch: expected ${authResult.userId}, got ${user.id}`);
                            await this.bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                        }
                    }
                }
                else {
                    await this.bot.sendMessage(chatId, '–°—Å—ã–ª–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                }
            }
            else {
                // –û–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
                const isDevelopment = process.env.NODE_ENV === 'development';
                const userName = user.first_name || user.username || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                if (isDevelopment) {
                    await this.bot.sendMessage(chatId, `üëã –ü—Ä–∏–≤–µ—Ç, ${userName}!\n\n–≠—Ç–æ –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ SuperMock.\n\n–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram".\n\nüåê –°—Ä–µ–¥–∞: development\n‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã`);
                }
                else {
                    await this.bot.sendMessage(chatId, `üëã –ü—Ä–∏–≤–µ—Ç, ${userName}!\n\n–≠—Ç–æ –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ SuperMock.\n\n–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram".\n\nüåê –°—Ä–µ–¥–∞: production\n‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è`);
                }
            }
            // –í–°–ï–ì–î–ê –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            console.log('üîó Sending auth button to chat:', chatId);
            await this.sendAuthButton(chatId);
        }
        catch (error) {
            console.error('‚ùå Error handling start command:', error);
        }
    }
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
     */
    static async getBotInfo() {
        try {
            if (!this.bot) {
                throw new Error('Bot not initialized');
            }
            const botInfo = await this.bot.getMe();
            return {
                success: true,
                data: botInfo,
                message: 'Bot info retrieved successfully',
            };
        }
        catch (error) {
            console.error('Error getting bot info:', error);
            return {
                success: false,
                error: 'Failed to get bot info',
            };
        }
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    static async canSendMessage(userId) {
        try {
            if (!this.bot) {
                return false;
            }
            // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            // await this.bot.sendMessage(userId, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! üéâ', {
            //   disable_notification: true,
            // });
            return true;
        }
        catch (error) {
            return false;
        }
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    static async sendAuthButton(chatId) {
        try {
            if (!this.bot) {
                throw new Error('Bot not initialized');
            }
            console.log('üîó Sending auth button to chat:', chatId);
            const isProduction = process.env.NODE_ENV === 'production';
            if (isProduction) {
                // –í –ø—Ä–æ–¥–∞–∫—à–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Login Widget
                const baseUrl = 'https://supermock.ru';
                const authUrl = `${baseUrl}/auth-callback`;
                // –°–æ–∑–¥–∞–µ–º inline keyboard —Å LoginUrl –æ–±—ä–µ–∫—Ç–æ–º
                const keyboard = {
                    inline_keyboard: [
                        [
                            {
                                text: 'üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
                                login_url: {
                                    url: authUrl,
                                    forward_text: '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ SuperMock',
                                    bot_username: process.env.BOT_USERNAME || 'SuperMock_bot',
                                    request_write_access: true,
                                },
                            },
                        ],
                        [
                            {
                                text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –≤ Telegram',
                                web_app: { url: authUrl },
                            },
                        ],
                    ],
                };
                await this.bot.sendMessage(chatId, `üîó –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SuperMock!\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:\n\nüåê –°—Ä–µ–¥–∞: production\n‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram`, { reply_markup: keyboard });
            }
            else {
                // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ bot-auth
                const devUrl = `http://localhost:5173/bot-auth?userId=${chatId}`;
                await this.bot.sendMessage(chatId, `üîó –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:\n\n1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: http://localhost:5173\n2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${devUrl}\n\nüåê –°—Ä–µ–¥–∞: development\n‚ö†Ô∏è –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã`);
            }
            console.log('‚úÖ Auth button sent successfully to chat:', chatId);
        }
        catch (error) {
            console.error('‚ùå Error sending auth button:', error);
            // –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–∫–∏
            try {
                await this.bot?.sendMessage(chatId, 'üîó –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ SuperMock –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram".');
            }
            catch (fallbackError) {
                console.error('‚ùå Error sending fallback message:', fallbackError);
            }
        }
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥)
     */
    static async sendCheckTokenButton(chatId) {
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
        await this.sendAuthButton(chatId);
    }
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞
     */
    static stop() {
        if (this.bot) {
            this.bot.stopPolling();
            this.bot = null;
            console.log('ü§ñ Telegram bot stopped');
        }
    }
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
     */
    static async restart() {
        console.log('ü§ñ Restarting Telegram bot...');
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–æ—Ç
        this.stop();
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
        await new Promise((resolve) => setTimeout(resolve, 2000));
        // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
        if (this.botToken) {
            this.initialize(this.botToken);
        }
    }
}
//# sourceMappingURL=telegramBotService.js.map