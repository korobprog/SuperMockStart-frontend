import { PrismaClient } from '@prisma/client';
import pkg from '@prisma/client';
const { NotificationType } = pkg;
import { TelegramBotService } from './telegramBotService.js';
const prisma = new PrismaClient();
export class NotificationService {
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏
     */
    static async sendInterviewConfirmation(session) {
        const notifications = [
            {
                userId: session.candidateId,
                sessionId: session.id,
                type: NotificationType.INTERVIEW_CONFIRMED,
                title: '–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!',
                message: `–í–∞—à–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ "${session.profession}" –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –Ω–∞ ${this.formatDateTime(session.scheduledDateTime)}. –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${session.meetingLink}`,
            },
            {
                userId: session.interviewerId,
                sessionId: session.id,
                type: NotificationType.INTERVIEW_CONFIRMED,
                title: '–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!',
                message: `–í–∞—à–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ "${session.profession}" –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –Ω–∞ ${this.formatDateTime(session.scheduledDateTime)}. –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${session.meetingLink}`,
            },
        ];
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ë–î
        await prisma.notifications.createMany({
            data: notifications,
        });
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram
        for (const notification of notifications) {
            await this.sendTelegramNotification(notification.userId, notification.title, notification.message);
        }
        // –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 30 –º–∏–Ω—É—Ç
        await this.scheduleReminders(session);
    }
    /**
     * –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ –≤—Å—Ç—Ä–µ—á–∏
     */
    static async scheduleReminders(session) {
        const reminderTime = new Date(session.scheduledDateTime);
        reminderTime.setMinutes(reminderTime.getMinutes() - 30);
        // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –±—É–¥—É—â–µ–º
        if (reminderTime > new Date()) {
            const reminderNotifications = [
                {
                    userId: session.candidateId,
                    sessionId: session.id,
                    type: NotificationType.INTERVIEW_REMINDER,
                    title: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏',
                    message: `–ß–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç —É –≤–∞—Å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–º–µ—Ä—É, –º–∏–∫—Ä–æ—Ñ–æ–Ω –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ. –°—Å—ã–ª–∫–∞: ${session.meetingLink}`,
                    scheduled: reminderTime,
                },
                {
                    userId: session.interviewerId,
                    sessionId: session.id,
                    type: NotificationType.INTERVIEW_REMINDER,
                    title: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏',
                    message: `–ß–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç —É –≤–∞—Å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–º–µ—Ä—É, –º–∏–∫—Ä–æ—Ñ–æ–Ω –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ. –°—Å—ã–ª–∫–∞: ${session.meetingLink}`,
                    scheduled: reminderTime,
                },
            ];
            await prisma.notifications.createMany({
                data: reminderNotifications,
            });
        }
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    static async sendScheduledNotifications() {
        const now = new Date();
        const notifications = await prisma.notifications.findMany({
            where: {
                scheduled: { lte: now },
                sent: false,
            },
            include: {
                user: true,
            },
        });
        for (const notification of notifications) {
            try {
                await this.sendTelegramNotification(notification.userId, notification.title, notification.message);
                await prisma.notifications.update({
                    where: { id: notification.id },
                    data: {
                        sent: true,
                        sentAt: now,
                    },
                });
            }
            catch (error) {
                console.error(`Failed to send notification ${notification.id}:`, error);
            }
        }
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—Å—å–±–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
     */
    static async sendFeedbackRequest(sessionId) {
        const session = await prisma.interview_sessions.findUnique({
            where: { id: sessionId },
            include: {
                candidate: true,
                interviewer: true,
            },
        });
        if (!session)
            return;
        const notifications = [
            {
                userId: session.candidateId,
                sessionId: session.id,
                type: NotificationType.FEEDBACK_REQUEST,
                title: '–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏',
                message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º –ø—Ä–æ—à–µ–¥—à–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è. –í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å —Å–∏—Å—Ç–µ–º—É.',
            },
            {
                userId: session.interviewerId,
                sessionId: session.id,
                type: NotificationType.FEEDBACK_REQUEST,
                title: '–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏',
                message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º –ø—Ä–æ—à–µ–¥—à–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è. –í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å —Å–∏—Å—Ç–µ–º—É.',
            },
        ];
        await prisma.notifications.createMany({
            data: notifications,
        });
        for (const notification of notifications) {
            await this.sendTelegramNotification(notification.userId, notification.title, notification.message);
        }
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
     */
    static async sendFeedbackReminders() {
        // –ù–∞—Ö–æ–¥–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –±–µ–∑ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
        const sessionsNeedingFeedback = await prisma.interview_sessions.findMany({
            where: {
                status: 'COMPLETED',
                updatedAt: {
                    lt: new Date(Date.now() - 24 * 60 * 60 * 1000), // 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
                },
            },
            include: {
                feedbacks: true,
                candidate: true,
                interviewer: true,
            },
        });
        for (const session of sessionsNeedingFeedback) {
            const candidateGaveFeedback = session.feedbacks.some((f) => f.fromUserId === session.candidateId);
            const interviewerGaveFeedback = session.feedbacks.some((f) => f.fromUserId === session.interviewerId);
            if (!candidateGaveFeedback) {
                await this.sendTelegramNotification(session.candidateId, '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ—Ç–∑—ã–≤–µ', '–í—ã –µ—â–µ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ –æ –ø—Ä–æ—à–µ–¥—à–µ–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º.');
            }
            if (!interviewerGaveFeedback) {
                await this.sendTelegramNotification(session.interviewerId, '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ—Ç–∑—ã–≤–µ', '–í—ã –µ—â–µ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ –æ –ø—Ä–æ—à–µ–¥—à–µ–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º.');
            }
        }
    }
    /**
     * –£–≤–µ–¥–æ–º–∏—Ç—å –æ —Å–º–µ–Ω–µ —Ä–æ–ª–µ–π
     */
    static async notifyRoleChange(userId, newRole) {
        await prisma.notifications.create({
            data: {
                userId,
                type: NotificationType.ROLE_CHANGED,
                title: '–†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞',
                message: `–í–∞—à–∞ —Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${newRole}. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è—Ö –≤ –Ω–æ–≤–æ–π —Ä–æ–ª–∏.`,
            },
        });
        await this.sendTelegramNotification(userId, '–†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞', `–í–∞—à–∞ —Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${newRole}. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è—Ö –≤ –Ω–æ–≤–æ–π —Ä–æ–ª–∏.`);
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram
     */
    static async sendTelegramNotification(userId, title, message) {
        try {
            const user = await prisma.users.findUnique({
                where: { id: userId },
            });
            if (user?.telegramId) {
                await TelegramBotService.sendMessage(parseInt(user.telegramId), `üîî *${title}*\n\n${message}`);
            }
        }
        catch (error) {
            console.error('Failed to send Telegram notification:', error);
        }
    }
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    static formatDateTime(date) {
        return date.toLocaleString('ru-RU', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            timeZone: 'Europe/Moscow',
        });
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    static async getUserNotifications(userId, limit = 50) {
        return await prisma.notifications.findMany({
            where: { userId },
            orderBy: { createdAt: 'desc' },
            take: limit,
            include: {
                session: {
                    include: {
                        candidate: true,
                        interviewer: true,
                    },
                },
            },
        });
    }
    /**
     * –û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
     */
    static async markNotificationsAsRead(userId, notificationIds) {
        await prisma.notifications.updateMany({
            where: {
                id: { in: notificationIds },
                userId,
            },
            data: {
                sent: true,
                sentAt: new Date(),
            },
        });
    }
}
//# sourceMappingURL=notificationService.js.map