import { CalendarService } from '../services/calendarService.js';
import { MatchingService } from '../services/matchingService.js';
import { NotificationService } from '../services/notificationService.js';
import prisma from '../services/prisma.js';
export class CalendarController {
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
     */
    static async getAvailableSlots(req, res) {
        try {
            console.log('üîç CalendarController.getAvailableSlots called');
            console.log('üîç req.params:', req.params);
            console.log('üîç req.query:', req.query);
            const { profession } = req.params;
            const { date } = req.query;
            console.log('üîç Extracted data:', { profession, date });
            if (!profession) {
                console.log('‚ùå Profession is required');
                return res.status(400).json({
                    success: false,
                    error: 'Profession is required',
                });
            }
            console.log('üîç Calling CalendarService.getAvailableSlots with:', {
                profession,
                date,
            });
            const slots = await CalendarService.getAvailableSlots(profession, date ? new Date(date) : undefined);
            console.log('üîç CalendarService.getAvailableSlots returned:', slots.length, 'slots');
            res.json({
                success: true,
                data: slots,
            });
        }
        catch (error) {
            console.error('‚ùå Error in CalendarController.getAvailableSlots:', error);
            res.status(500).json({
                success: false,
                error: 'Failed to get available slots',
            });
        }
    }
    /**
     * –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ
     */
    static async joinQueue(req, res) {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º extendedUser.id (userDbId) –∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            const userId = req.extendedUser?.id;
            const { profession, preferredDateTime, queueType } = req.body;
            console.log('üîç joinQueue - userId:', userId);
            console.log('üîç joinQueue - profession:', profession);
            console.log('üîç joinQueue - preferredDateTime:', preferredDateTime);
            console.log('üîç joinQueue - queueType:', queueType);
            if (!userId) {
                return res.status(401).json({
                    success: false,
                    error: 'User not authenticated',
                });
            }
            if (!profession || !preferredDateTime || !queueType) {
                return res.status(400).json({
                    success: false,
                    error: 'Profession, preferredDateTime and queueType are required',
                });
            }
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –µ–≥–æ —è–∑—ã–∫–æ–º –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ñ–æ—Ä–º—ã
            const user = await prisma.users.findFirst({
                where: { id: userId },
                include: {
                    user_form_data: {
                        orderBy: { createdAt: 'desc' },
                        take: 1,
                    },
                },
            });
            console.log('üîç joinQueue - user found:', !!user);
            console.log('üîç joinQueue - user.user_form_data:', user?.user_form_data);
            if (!user || !user.user_form_data[0]) {
                console.log('‚ùå joinQueue - User or user_form_data not found');
                return res.status(400).json({
                    success: false,
                    error: 'User language not found. Please complete the registration form first.',
                });
            }
            const userLanguage = user.user_form_data[0].language;
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Å —è–∑—ã–∫–æ–º
            const queueEntry = await CalendarService.joinQueue({
                userId: user.id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                profession,
                language: userLanguage,
                preferredDateTime: new Date(preferredDateTime),
                queueType,
            });
            // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –º–∞—Ç—á
            const match = await MatchingService.findMatch(queueEntry.id);
            if (match) {
                // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –º–∞—Ç—á, —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
                const session = await CalendarService.createInterviewSession(match);
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                await NotificationService.sendInterviewConfirmation(session);
                res.json({
                    success: true,
                    message: 'Match found and interview scheduled!',
                    data: {
                        queueEntry,
                        session,
                    },
                });
            }
            else {
                res.json({
                    success: true,
                    message: 'Added to queue, waiting for match...',
                    data: { queueEntry },
                });
            }
        }
        catch (error) {
            console.error('Error joining queue:', error);
            res.status(500).json({
                success: false,
                error: 'Failed to join queue',
            });
        }
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥–∏
     */
    static async getQueueStatus(req, res) {
        try {
            console.log('üîç CalendarController.getQueueStatus called');
            console.log('üîç req.extendedUser:', req.extendedUser);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º extendedUser.id (userDbId) –∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            const userId = req.extendedUser?.id;
            console.log('üîç userId from extendedUser:', userId);
            if (!userId) {
                console.log('‚ùå User not authenticated');
                return res.status(401).json({
                    success: false,
                    error: 'User not authenticated',
                });
            }
            console.log('üîç Calling CalendarService.getQueueStatus with userId:', userId);
            const queueStatus = await CalendarService.getQueueStatus(userId);
            console.log('üîç CalendarService.getQueueStatus returned:', queueStatus);
            res.json({
                success: true,
                data: queueStatus,
            });
        }
        catch (error) {
            console.error('‚ùå Error in CalendarController.getQueueStatus:', error);
            res.status(500).json({
                success: false,
                error: 'Failed to get queue status',
            });
        }
    }
    /**
     * –û—Ç–º–µ–Ω–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏
     */
    static async leaveQueue(req, res) {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º extendedUser.id (userDbId) –∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            const userId = req.extendedUser?.id;
            if (!userId) {
                return res.status(401).json({
                    success: false,
                    error: 'User not authenticated',
                });
            }
            await CalendarService.leaveQueue(userId);
            res.json({
                success: true,
                message: 'Successfully left the queue',
            });
        }
        catch (error) {
            console.error('Error leaving queue:', error);
            res.status(500).json({
                success: false,
                error: 'Failed to leave queue',
            });
        }
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    static async getUserSessions(req, res) {
        try {
            console.log('üîç CalendarController.getUserSessions called');
            console.log('üîç req.extendedUser:', req.extendedUser);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º extendedUser.id (userDbId) –∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            const userId = req.extendedUser?.id;
            console.log('üîç userId from extendedUser:', userId);
            if (!userId) {
                console.log('‚ùå User not authenticated');
                return res.status(401).json({
                    success: false,
                    error: 'User not authenticated',
                });
            }
            console.log('üîç Calling CalendarService.getUserSessions with userId:', userId);
            const sessions = await CalendarService.getUserSessions(userId);
            console.log('üîç CalendarService.getUserSessions returned:', sessions.length, 'sessions');
            res.json({
                success: true,
                data: sessions,
            });
        }
        catch (error) {
            console.error('‚ùå Error in CalendarController.getUserSessions:', error);
            res.status(500).json({
                success: false,
                error: 'Failed to get user sessions',
            });
        }
    }
    /**
     * –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ
     */
    static async cancelSession(req, res) {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º extendedUser.id (userDbId) –∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            const userId = req.extendedUser?.id;
            const { sessionId } = req.params;
            if (!userId) {
                return res.status(401).json({
                    success: false,
                    error: 'User not authenticated',
                });
            }
            await CalendarService.cancelSession(sessionId, userId);
            res.json({
                success: true,
                message: 'Session cancelled successfully',
            });
        }
        catch (error) {
            console.error('Error cancelling session:', error);
            res.status(500).json({
                success: false,
                error: 'Failed to cancel session',
            });
        }
    }
    /**
     * –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ
     */
    static async completeSession(req, res) {
        try {
            console.log('üîç CalendarController.completeSession –≤—ã–∑–≤–∞–Ω');
            console.log('üîç req.extendedUser:', req.extendedUser);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º extendedUser.id (userDbId) –∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            const userId = req.extendedUser?.id;
            const { sessionId } = req.params;
            console.log('üîç userId –∏–∑ extendedUser:', userId);
            console.log('üîç sessionId –∏–∑ params:', sessionId);
            if (!userId) {
                console.log('‚ùå userId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ extendedUser');
                return res.status(401).json({
                    success: false,
                    error: 'User not authenticated',
                });
            }
            console.log('‚úÖ –í—ã–∑—ã–≤–∞–µ–º CalendarService.completeSession');
            await CalendarService.completeSession(sessionId, userId);
            console.log('‚úÖ CalendarService.completeSession –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            res.json({
                success: true,
                message: 'Session completed successfully',
            });
        }
        catch (error) {
            console.error('‚ùå Error completing session:', error);
            res.status(500).json({
                success: false,
                error: 'Failed to complete session',
            });
        }
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
     */
    static async getSession(req, res) {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º extendedUser.id (userDbId) –∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            const userId = req.extendedUser?.id;
            const { sessionId } = req.params;
            if (!userId) {
                return res.status(401).json({
                    success: false,
                    error: 'User not authenticated',
                });
            }
            const session = await prisma.interview_sessions.findFirst({
                where: {
                    id: sessionId,
                    OR: [{ candidateId: userId }, { interviewerId: userId }],
                },
                include: {
                    users_interview_sessions_candidateIdTousers: {
                        select: {
                            firstName: true,
                            lastName: true,
                            username: true,
                        },
                    },
                    users_interview_sessions_interviewerIdTousers: {
                        select: {
                            firstName: true,
                            lastName: true,
                            username: true,
                        },
                    },
                },
            });
            if (!session) {
                return res.status(404).json({
                    success: false,
                    error: 'Session not found or access denied',
                });
            }
            res.json({
                success: true,
                data: session,
            });
        }
        catch (error) {
            console.error('Error getting session:', error);
            res.status(500).json({
                success: false,
                error: 'Failed to get session',
            });
        }
    }
}
//# sourceMappingURL=calendarController.js.map