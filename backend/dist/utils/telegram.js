import crypto from 'crypto';
export class TelegramUtils {
    static botToken;
    static initialize(token) {
        this.botToken = token;
        console.log('üîß TelegramUtils initialized with token length:', token ? token.length : 0);
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ –±–æ—Ç —Ç–æ–∫–µ–Ω
     */
    static isInitialized() {
        if (!this.botToken) {
            console.error('‚ùå TelegramUtils not initialized with bot token');
            return false;
        }
        return true;
    }
    /**
     * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram Web App
     */
    static validateWebAppData(initData) {
        try {
            // –ü–∞—Ä—Å–∏–º initData
            const urlParams = new URLSearchParams(initData);
            const hash = urlParams.get('hash');
            if (!hash) {
                return null;
            }
            // –£–¥–∞–ª—è–µ–º hash –∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            urlParams.delete('hash');
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
            const dataCheckString = Array.from(urlParams.entries())
                .sort(([a], [b]) => a.localeCompare(b))
                .map(([key, value]) => `${key}=${value}`)
                .join('\n');
            // –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
            const secretKey = crypto
                .createHmac('sha256', 'WebAppData')
                .update(this.botToken)
                .digest();
            // –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à
            const calculatedHash = crypto
                .createHmac('sha256', secretKey)
                .update(dataCheckString)
                .digest('hex');
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ—à
            if (calculatedHash !== hash) {
                return null;
            }
            // –ü–∞—Ä—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userStr = urlParams.get('user');
            if (!userStr) {
                return null;
            }
            const user = JSON.parse(userStr);
            return {
                query_id: urlParams.get('query_id') || '',
                user,
                auth_date: parseInt(urlParams.get('auth_date') || '0'),
                hash,
                start_param: urlParams.get('start_param') || undefined,
                can_send_after: urlParams.get('can_send_after')
                    ? parseInt(urlParams.get('can_send_after'))
                    : undefined,
                chat_type: urlParams.get('chat_type') || undefined,
                chat_instance: urlParams.get('chat_instance') || undefined,
            };
        }
        catch (error) {
            console.error('Error validating Telegram Web App data:', error);
            return null;
        }
    }
    /**
     * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram Login Widget
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è Login Widget —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
     */
    static validateWidgetData(widgetData) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            if (!this.isInitialized()) {
                console.error('‚ùå TelegramUtils not initialized');
                return false;
            }
            console.log('üîç Validating Telegram Widget data:', {
                id: widgetData.id,
                first_name: widgetData.first_name,
                auth_date: widgetData.auth_date,
                has_hash: !!widgetData.hash,
                bot_token_length: this.botToken ? this.botToken.length : 0,
            });
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            if (!widgetData.id ||
                !widgetData.first_name ||
                !widgetData.auth_date ||
                !widgetData.hash) {
                console.error('‚ùå Missing required fields in widget data');
                return false;
            }
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö (–Ω–µ –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç –¥–ª—è Login Widget)
            const currentTime = Math.floor(Date.now() / 1000);
            const fiveMinutes = 5 * 60;
            if (currentTime - widgetData.auth_date > fiveMinutes) {
                console.error('‚ùå Widget data expired');
                return false;
            }
            // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Telegram
            const dataCheckString = Object.entries(widgetData)
                .filter(([key]) => key !== 'hash')
                .sort(([a], [b]) => a.localeCompare(b))
                .map(([key, value]) => `${key}=${value}`)
                .join('\n');
            console.log('üìã Data check string:', dataCheckString);
            // –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Telegram
            const secretKey = crypto
                .createHash('sha256')
                .update(this.botToken)
                .digest();
            // –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à
            const calculatedHash = crypto
                .createHmac('sha256', secretKey)
                .update(dataCheckString)
                .digest('hex');
            console.log('üîê Hash comparison:', {
                received: widgetData.hash,
                calculated: calculatedHash,
                match: calculatedHash === widgetData.hash,
            });
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ—à
            const isValid = calculatedHash === widgetData.hash;
            if (!isValid) {
                console.error('‚ùå Widget data hash validation failed');
            }
            else {
                console.log('‚úÖ Widget data hash validation successful');
            }
            return isValid;
        }
        catch (error) {
            console.error('‚ùå Error validating Telegram Widget data:', error);
            return false;
        }
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –ª–∏ –¥–∞–Ω–Ω—ã–µ (–±–æ–ª—å—à–µ 1 —á–∞—Å–∞)
     */
    static isDataExpired(authDate) {
        const currentTime = Math.floor(Date.now() / 1000);
        const oneHour = 3600;
        return currentTime - authDate > oneHour;
    }
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ Telegram Bot API
     */
    static async getUserInfo(userId) {
        try {
            if (!this.isInitialized()) {
                console.error('‚ùå TelegramUtils not initialized for getUserInfo');
                return null;
            }
            const response = await fetch(`https://api.telegram.org/bot${this.botToken}/getChat?chat_id=${userId}`);
            const data = await response.json();
            if (data.ok) {
                return {
                    id: data.result.id,
                    is_bot: data.result.is_bot || false,
                    first_name: data.result.first_name,
                    last_name: data.result.last_name,
                    username: data.result.username,
                    language_code: data.result.language_code,
                    photo_url: data.result.photo?.small_file_id,
                };
            }
            return null;
        }
        catch (error) {
            console.error('Error fetching user info:', error);
            return null;
        }
    }
}
//# sourceMappingURL=telegram.js.map