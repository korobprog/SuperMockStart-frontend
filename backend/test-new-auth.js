import http from 'http';

function makeRequest(options, data = null) {
  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      let responseData = '';

      res.on('data', (chunk) => {
        responseData += chunk;
      });

      res.on('end', () => {
        try {
          const parsedData = JSON.parse(responseData);
          resolve({
            status: res.statusCode,
            data: parsedData,
          });
        } catch (error) {
          resolve({
            status: res.statusCode,
            data: responseData,
          });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    if (data) {
      req.write(JSON.stringify(data));
    }

    req.end();
  });
}

async function testNewAuth() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');

    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
    console.log('üì§ –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω...');
    const tokenResponse = await makeRequest(
      {
        hostname: 'localhost',
        port: 3001,
        path: '/api/auth/test-token-user',
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      },
      {
        userId: '1736594064', // –í–∞—à Telegram ID
      }
    );

    console.log('üì• –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', tokenResponse.status);
    console.log(
      'üì• –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:',
      JSON.stringify(tokenResponse.data, null, 2)
    );

    if (tokenResponse.status === 200 && tokenResponse.data.success) {
      const token = tokenResponse.data.data.token;
      console.log('\n‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω!');
      console.log('üîë –¢–æ–∫–µ–Ω:', token.substring(0, 50) + '...');

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
      console.log('\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞...');
      const verifyResponse = await makeRequest({
        hostname: 'localhost',
        port: 3001,
        path: '/api/auth/verify-extended-token',
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
      });

      console.log('üì• –°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:', verifyResponse.status);
      console.log(
        'üì• –î–∞–Ω–Ω—ã–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:',
        JSON.stringify(verifyResponse.data, null, 2)
      );

      if (verifyResponse.status === 200 && verifyResponse.data.success) {
        console.log('\n‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
        console.log(
          'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:',
          verifyResponse.data.data.firstName,
          verifyResponse.data.data.lastName
        );
        console.log('üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', verifyResponse.data.data.id);

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
        console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º...');
        const apiResponse = await makeRequest({
          hostname: 'localhost',
          port: 3001,
          path: '/api/calendar/sessions/test-session-1',
          method: 'GET',
          headers: {
            Authorization: `Bearer ${token}`,
            'Content-Type': 'application/json',
          },
        });

        console.log('üì• –°—Ç–∞—Ç—É—Å API:', apiResponse.status);
        console.log(
          'üì• –î–∞–Ω–Ω—ã–µ API:',
          JSON.stringify(apiResponse.data, null, 2)
        );

        if (apiResponse.status === 200) {
          console.log('\nüéâ –í—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ!');
          console.log('\nüîß –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ:');
          console.log(`localStorage.setItem("telegram_token", "${token}");`);
          console.log(
            '\nüìù –¢–µ–ø–µ—Ä—å –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω!'
          );
        } else {
          console.log('\n‚ùå API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º');
        }
      } else {
        console.log('\n‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞');
      }
    } else {
      console.log('\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

testNewAuth();
