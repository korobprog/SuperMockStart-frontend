import TelegramBot from 'node-telegram-bot-api';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
const isDevelopment = process.env.NODE_ENV === 'development';

if (isDevelopment) {
  dotenv.config({ path: './env.backend' });
  console.log('üîß Starting DEVELOPMENT bot...');
} else {
  dotenv.config({ path: './env.prod' });
  console.log('üîß Starting PRODUCTION bot...');
}

const token = process.env.TELEGRAM_TOKEN;
const botUsername = process.env.BOT_USERNAME;

console.log('ü§ñ Bot Configuration:');
console.log('  - Environment:', process.env.NODE_ENV || 'development');
console.log('  - Token length:', token ? token.length : 0);
console.log('  - Bot username:', botUsername);

if (!token) {
  console.error('‚ùå TELEGRAM_TOKEN not found in environment');
  process.exit(1);
}

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
const bot = new TelegramBot(token, {
  polling: isDevelopment, // polling —Ç–æ–ª—å–∫–æ –≤ development
  webHook: !isDevelopment
    ? {
        port: 8443,
        host: '0.0.0.0',
      }
    : false,
  polling_options: isDevelopment
    ? {
        timeout: 10,
        limit: 100,
        allowed_updates: ['message'],
      }
    : undefined,
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  console.log('üì± Received message:', {
    chatId: msg.chat.id,
    userId: msg.from?.id,
    username: msg.from?.username,
    firstName: msg.from?.first_name,
    text: msg.text,
  });

  if (msg.text && msg.text.startsWith('/start')) {
    console.log('üîê Processing /start command');

    try {
      const chatId = msg.chat.id;
      const user = msg.from;
      const userName = user?.first_name || user?.username || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      const text = msg.text || '';

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      if (text.startsWith('/start auth_')) {
        const authId = text.replace('/start auth_', '');
        console.log(`üîê Processing auth request with ID: ${authId}`);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        await bot.sendMessage(
          chatId,
          `‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userName}!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ SuperMock.\n\nüåê –°—Ä–µ–¥–∞: ${
            isDevelopment ? 'development' : 'production'
          }\n${
            isDevelopment
              ? '‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã'
              : '‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
          }`
        );

        console.log(`User ${user.id} (${userName}) authenticated via bot`);
      } else {
        // –û–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await bot.sendMessage(
          chatId,
          `üëã –ü—Ä–∏–≤–µ—Ç, ${userName}!\n\n–≠—Ç–æ –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ SuperMock.\n\n–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram".\n\nüåê –°—Ä–µ–¥–∞: ${
            isDevelopment ? 'development' : 'production'
          }\n${
            isDevelopment
              ? '‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã'
              : '‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
          }`
        );
      }

      // –í–°–ï–ì–î–ê –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      console.log('üîó Sending auth button to chat:', chatId);

      if (isDevelopment) {
        // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ bot-auth
        const devUrl = `http://localhost:5173/bot-auth?userId=${chatId}`;

        await bot.sendMessage(
          chatId,
          `üîó –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:\n\n1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: http://localhost:5173\n2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${devUrl}\n\nüåê –°—Ä–µ–¥–∞: development\n‚ö†Ô∏è –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã`
        );
      } else {
        // –í –ø—Ä–æ–¥–∞–∫—à–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Login Widget
        const baseUrl = 'https://supermock.ru';
        const authUrl = `${baseUrl}/auth-callback`;

        // –°–æ–∑–¥–∞–µ–º inline keyboard —Å LoginUrl –æ–±—ä–µ–∫—Ç–æ–º
        const keyboard = {
          inline_keyboard: [
            [
              {
                text: 'üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
                login_url: {
                  url: authUrl,
                  forward_text: '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ SuperMock',
                  bot_username: botUsername,
                  request_write_access: true,
                },
              },
            ],
            [
              {
                text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –≤ Telegram',
                web_app: { url: authUrl },
              },
            ],
          ],
        };

        await bot.sendMessage(
          chatId,
          `üîó –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SuperMock!\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:\n\nüåê –°—Ä–µ–¥–∞: production\n‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram`,
          { reply_markup: keyboard }
        );
      }

      console.log('‚úÖ Auth button sent successfully to chat:', chatId);
    } catch (error) {
      console.error('‚ùå Error sending message:', error);
      // –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–∫–∏
      try {
        await bot.sendMessage(
          msg.chat.id,
          'üîó –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ SuperMock –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram".'
        );
      } catch (fallbackError) {
        console.error('‚ùå Error sending fallback message:', fallbackError);
      }
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
  console.error('ü§ñ Bot error:', error);
});

bot.on('polling_error', (error) => {
  console.error('ü§ñ Polling error:', error);

  // –ü—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ 409, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
  if (error.code === 'ETELEGRAM' && error.message.includes('409')) {
    console.log('ü§ñ Conflict detected, stopping bot...');
    bot.stopPolling();
    process.exit(0);
  }
});

console.log('ü§ñ Bot started successfully!');
console.log(
  `üåê Mode: ${isDevelopment ? 'Development (polling)' : 'Production (webhook)'}`
);
console.log('üìã To test:');
if (isDevelopment) {
  console.log('1. Go to http://localhost:5173/bot-auth-test');
  console.log('2. Click "–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞"');
  console.log('3. Send /start to the bot');
  console.log('4. Check if the bot sends an auth message');
} else {
  console.log('1. Go to https://supermock.ru/bot-auth-test');
  console.log('2. Click "–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞"');
  console.log('3. Send /start to the bot');
  console.log('4. Check if the bot sends an auth button');
}
