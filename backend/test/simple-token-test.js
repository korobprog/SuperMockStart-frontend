import jwt from 'jsonwebtoken';

const JWT_SECRET = 'your-secret-key-change-in-production';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const testUser = {
  id: 'user-1754639736402-is5cno2co',
  telegramId: '123456789',
  username: 'testuser',
  firstName: 'Test',
  lastName: 'User',
  role: 'USER',
};

function generateTestToken() {
  const payload = {
    userId: parseInt(testUser.telegramId),
    username: testUser.username,
    firstName: testUser.firstName,
    lastName: testUser.lastName,
    role: testUser.role,
    authType: 'telegram',
    userDbId: testUser.id,
    iat: Math.floor(Date.now() / 1000),
    exp: Math.floor(Date.now() / 1000) + 7 * 24 * 60 * 60, // 7 –¥–Ω–µ–π
  };

  return jwt.sign(payload, JWT_SECRET);
}

function verifyTestToken(token) {
  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    return { success: true, payload: decoded };
  } catch (error) {
    return { success: false, error: error.message };
  }
}

function testToken() {
  console.log('üîç Testing JWT token generation and verification...');

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
  const token = generateTestToken();
  console.log('üîë Generated token:', token.substring(0, 50) + '...');
  console.log('üîë Token length:', token.length);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç JWT
  const parts = token.split('.');
  console.log('üîç JWT format check:', {
    hasThreeParts: parts.length === 3,
    partsCount: parts.length,
  });

  // –î–µ–∫–æ–¥–∏—Ä—É–µ–º payload –±–µ–∑ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
  try {
    const payload = JSON.parse(Buffer.from(parts[1], 'base64').toString());
    console.log('üìã JWT payload:', {
      userId: payload.userId,
      userDbId: payload.userDbId,
      authType: payload.authType,
      role: payload.role,
      exp: new Date(payload.exp * 1000).toISOString(),
    });
  } catch (error) {
    console.log('‚ùå Failed to decode JWT payload:', error.message);
  }

  // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
  const verification = verifyTestToken(token);
  if (verification.success) {
    console.log('‚úÖ Token verification successful');
    console.log('üë§ User data:', {
      userId: verification.payload.userId,
      userDbId: verification.payload.userDbId,
      firstName: verification.payload.firstName,
      role: verification.payload.role,
    });
  } else {
    console.log('‚ùå Token verification failed:', verification.error);
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–µ–∫—Ä–µ—Ç–æ–º
  console.log('üîç Testing with wrong secret...');
  const wrongVerification = jwt.verify(token, 'wrong-secret');
  console.log('‚ùå This should have failed, but got:', wrongVerification);
}

testToken();
