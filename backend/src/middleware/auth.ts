import { Request, Response, NextFunction } from 'express';
import { AuthService } from '../services/authService.js';
import { TelegramUser, User, UserRole } from '../types/index.js';

// –†–∞—Å—à–∏—Ä—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Request –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
declare global {
  namespace Express {
    interface Request {
      user?: TelegramUser | User;
      extendedUser?: User;
    }
  }
}

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞
 */
export const authenticateToken = (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  const authHeader = req.headers.authorization;
  const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN

  if (!token) {
    return res.status(401).json({
      success: false,
      error: 'Access token required',
    });
  }

  const result = AuthService.verifyToken(token);

  if (!result.success || !result.data) {
    return res.status(401).json({
      success: false,
      error: result.error || 'Invalid token',
    });
  }

  req.user = result.data;
  next();
};

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram Web App –¥–∞–Ω–Ω—ã—Ö
 */
export const validateTelegramData = (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  const { initData } = req.body;

  if (!initData) {
    return res.status(400).json({
      success: false,
      error: 'Telegram initData is required',
    });
  }

  // –î–æ–±–∞–≤–ª—è–µ–º initData –≤ request –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ
  (req as any).initData = initData;
  next();
};

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ JWT —Ç–æ–∫–µ–Ω–∞
 */
export const authenticateExtendedToken = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    console.log('üîç authenticateExtendedToken called');
    console.log(
      'üîç Authorization header:',
      req.headers.authorization ? 'present' : 'missing'
    );

    const authHeader = req.headers.authorization;

    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      console.log('‚ùå No valid Authorization header');
      return res.status(401).json({
        success: false,
        error: 'No valid authorization header',
      });
    }

    const token = authHeader.substring(7);
    console.log('üîç Token extracted:', token.substring(0, 20) + '...');
    console.log('üîç Token length:', token.length);
    console.log('üîç Token format check:', {
      isJWT: token.split('.').length === 3,
      parts: token.split('.').length,
    });

    const result = await AuthService.verifyExtendedToken(token);

    console.log('üîç AuthService.verifyExtendedToken result:', {
      success: result.success,
      error: result.error,
      userId: result.data?.id,
    });

    if (!result.success || !result.data) {
      console.log('‚ùå Token verification failed:', result.error);
      return res.status(401).json({
        success: false,
        error: result.error || 'Invalid token',
      });
    }

    console.log('‚úÖ Token verified successfully, user ID:', result.data.id);

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞
    req.extendedUser = result.data;
    next();
  } catch (error) {
    console.error('‚ùå authenticateExtendedToken error:', error);
    res.status(500).json({
      success: false,
      error: 'Authentication failed',
    });
  }
};

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 */
export const requireAdmin = (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  if (!req.extendedUser) {
    return res.status(401).json({
      success: false,
      error: 'Authentication required',
    });
  }

  if (req.extendedUser.role !== UserRole.ADMIN) {
    return res.status(403).json({
      success: false,
      error: 'Admin access required',
    });
  }

  next();
};

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const requireRole = (role: UserRole) => {
  return (req: Request, res: Response, next: NextFunction) => {
    if (!req.extendedUser) {
      return res.status(401).json({
        success: false,
        error: 'Authentication required',
      });
    }

    // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ä–æ–ª—è–º
    if (req.extendedUser.role === UserRole.ADMIN) {
      return next();
    }

    if (req.extendedUser.role !== role) {
      return res.status(403).json({
        success: false,
        error: `Role ${role} required`,
      });
    }

    next();
  };
};

/**
 * –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
 */
export const optionalAuth = (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  const authHeader = req.headers.authorization;
  const token = authHeader && authHeader.split(' ')[1];

  if (token) {
    const result = AuthService.verifyToken(token);
    if (result.success && result.data) {
      req.user = result.data;
    }
  }

  next();
};

/**
 * –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
 */
export const optionalExtendedAuth = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  const authHeader = req.headers.authorization;
  const token = authHeader && authHeader.split(' ')[1];

  if (token) {
    try {
      const result = await AuthService.verifyExtendedToken(token);
      if (result.success && result.data) {
        req.extendedUser = result.data;
        req.user = result.data;
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      console.warn('Optional extended auth failed:', error);
    }
  }

  next();
};
