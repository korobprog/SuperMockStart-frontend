import { Request, Response } from 'express';
import pkg from '@prisma/client';
const { PrismaClient } = pkg;
import { getLanguageFromCountry } from '../utils/language.js';

const prisma = new PrismaClient();

interface FormData {
  profession: string;
  country: string;
  language: string;
  experience: string;
  email?: string;
  phone?: string;
}

export const saveFormData = async (req: Request, res: Response) => {
  try {
    const {
      profession,
      country,
      language,
      experience,
      email,
      phone,
    }: FormData = req.body;
    const userId = req.extendedUser?.id;

    if (!userId) {
      return res.status(401).json({
        success: false,
        error: 'Unauthorized - User ID not found',
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!profession || !country || !language || !experience) {
      return res.status(400).json({
        success: false,
        error:
          'Missing required fields: profession, country, language, experience',
      });
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ userId (database ID)
    const user = await prisma.users.findUnique({
      where: { id: userId },
    });

    if (!user) {
      return res.status(404).json({
        success: false,
        error: 'User not found',
      });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é
    await prisma.selected_professions.create({
      data: {
        id: `profession-${Date.now()}-${Math.random()
          .toString(36)
          .substr(2, 9)}`,
        userId: user.id,
        profession,
      },
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    await prisma.user_form_data.create({
      data: {
        id: `form-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
        userId: user.id,
        profession,
        country,
        language,
        experience,
        email,
        phone,
      },
    });

    // –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å (INTERVIEWER –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    // –°—Ç–∞—Ç—É—Å CANDIDATE —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏

    res.status(200).json({
      success: true,
      message: 'Form data saved successfully',
      data: {
        profession,
        country,
        experience,
        email,
        phone,
      },
    });
  } catch (error) {
    console.error('Error saving form data:', error);
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    });
  }
};

export const updateFormData = async (req: Request, res: Response) => {
  try {
    console.log('üîç updateFormData called');
    console.log('üîç req.body:', req.body);
    console.log('üîç req.extendedUser:', req.extendedUser);

    const {
      profession,
      country,
      language,
      experience,
      email,
      phone,
    }: FormData = req.body;
    const userId = req.extendedUser?.id;

    console.log('üîç userId:', userId);
    console.log('üîç form data:', {
      profession,
      country,
      language,
      experience,
      email,
      phone,
    });

    if (!userId) {
      console.log('‚ùå User ID not found');
      return res.status(401).json({
        success: false,
        error: 'Unauthorized - User ID not found',
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!profession || !country || !language || !experience) {
      console.log('‚ùå Missing required fields:', {
        profession,
        country,
        language,
        experience,
      });
      return res.status(400).json({
        success: false,
        error:
          'Missing required fields: profession, country, language, experience',
      });
    }

    console.log('üîç Looking for user with ID:', userId);

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ userId
    const user = await prisma.users.findUnique({
      where: { id: userId },
    });

    console.log('üîç User found:', !!user);
    console.log('üîç User data:', user);

    if (!user) {
      console.log('‚ùå User not found in database');
      return res.status(404).json({
        success: false,
        error: 'User not found',
      });
    }

    console.log('üîç Creating selected_professions record');

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ (–∏—Å—Ç–æ—Ä–∏—è –≤—ã–±–æ—Ä–∞)
    await prisma.selected_professions.create({
      data: {
        id: `profession-${Date.now()}-${Math.random()
          .toString(36)
          .substr(2, 9)}`,
        userId: user.id,
        profession,
      },
    });

    console.log('üîç selected_professions record created');

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    const existingFormData = await prisma.user_form_data.findFirst({
      where: { userId: user.id },
      orderBy: { createdAt: 'desc' },
    });

    console.log('üîç existingFormData found:', !!existingFormData);

    if (existingFormData) {
      console.log('üîç Updating existing form data');
      await prisma.user_form_data.update({
        where: { id: existingFormData.id },
        data: {
          profession,
          country,
          language,
          experience,
          email,
          phone,
        },
      });
    } else {
      console.log('üîç Creating new form data');
      await prisma.user_form_data.create({
        data: {
          id: `form-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
          userId: user.id,
          profession,
          country,
          language,
          experience,
          email,
          phone,
        },
      });
    }

    console.log('‚úÖ Form data updated successfully');

    res.status(200).json({
      success: true,
      message: 'Form data updated successfully',
      data: {
        profession,
        country,
        language,
        experience,
        email,
        phone,
      },
    });
  } catch (error) {
    console.error('‚ùå Error updating form data:', error);
    console.error(
      '‚ùå Error stack:',
      error instanceof Error ? error.stack : 'No stack trace'
    );
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    });
  }
};

export const getFormData = async (req: Request, res: Response) => {
  try {
    const userId = req.extendedUser?.id;
    console.log('üîç getFormData - userId:', userId);

    if (!userId) {
      return res.status(401).json({
        success: false,
        error: 'Unauthorized - User ID not found',
      });
    }

    const user = await prisma.users.findUnique({
      where: { id: userId },
      include: {
        selected_professions: {
          orderBy: { createdAt: 'desc' },
          take: 1,
        },
        user_form_data: {
          orderBy: { createdAt: 'desc' },
          take: 1,
        },
      },
    });

    console.log('üîç getFormData - user found:', !!user);
    console.log('üîç getFormData - user.user_form_data:', user?.user_form_data);
    console.log(
      'üîç getFormData - user.selected_professions:',
      user?.selected_professions
    );

    if (!user) {
      return res.status(404).json({
        success: false,
        error: 'User not found',
      });
    }

    const latestProfession = user.selected_professions[0];
    const latestFormData = user.user_form_data[0];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º (–ø–æ–ª—É—á–∞–ª –ª–∏ –æ–Ω –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å)
    const feedbackReceived = await prisma.feedback.findFirst({
      where: {
        toUserId: user.id,
      },
    });

    const canBeCandidate = feedbackReceived !== null;

    res.status(200).json({
      success: true,
      data: {
        profession: latestProfession?.profession || null,
        language: latestFormData?.language || 'en',
        country: latestFormData?.country || null,
        experience: latestFormData?.experience || null,
        email: latestFormData?.email || null,
        phone: latestFormData?.phone || null,
        status: user.status || 'INTERVIEWER', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é INTERVIEWER
        canBeCandidate,
      },
    });
  } catch (error) {
    console.error('Error getting form data:', error);
    res.status(500).json({
      success: false,
      error: 'Internal server error',
    });
  }
};
