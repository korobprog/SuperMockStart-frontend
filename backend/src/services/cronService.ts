import * as cron from 'node-cron';
import { NotificationService } from './notificationService.js';
import { MatchingService } from './matchingService.js';
import { CalendarService } from './calendarService.js';

export class CronService {
  private static tasks: Map<string, cron.ScheduledTask> = new Map();

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ cron –∑–∞–¥–∞—á–∏
   */
  static startAll() {
    console.log('üïí Starting all cron tasks...');

    this.startNotificationSender();
    this.startBatchMatching();
    this.startQueueCleaner();
    this.startFeedbackReminders();

    console.log('üïí All cron tasks started');
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ cron –∑–∞–¥–∞—á–∏
   */
  static stopAll() {
    this.tasks.forEach((task, name) => {
      task.destroy();
      console.log(`‚èπÔ∏è  Stopped cron task: ${name}`);
    });
    this.tasks.clear();
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)
   */
  private static startNotificationSender() {
    const task = cron.schedule(
      '* * * * *',
      async () => {
        try {
          await NotificationService.sendScheduledNotifications();
        } catch (error) {
          console.error('Error in notification sender cron:', error);
        }
      },
      {
        timezone: 'Europe/Moscow',
      }
    );

    this.tasks.set('notificationSender', task);
    console.log('üì® Started notification sender (every minute)');
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ç—á–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
   */
  private static startBatchMatching() {
    const task = cron.schedule('*/30 * * * * *', async () => {
      try {
        const matches = await MatchingService.runBatchMatching();

        if (matches.length > 0) {
          console.log(`üéØ Found ${matches.length} matches`);

          // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç—á–∞
          for (const match of matches) {
            try {
              const session = await CalendarService.createInterviewSession(
                match
              );
              await NotificationService.sendInterviewConfirmation(session);
            } catch (error) {
              console.error('Error creating session for match:', error);
            }
          }
        }
      } catch (error) {
        console.error('Error in batch matching cron:', error);
      }
    });

    this.tasks.set('batchMatching', task);
    console.log('üîÑ Started batch matching (every 30 seconds)');
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏ (–∫–∞–∂–¥—ã–π —á–∞—Å)
   */
  private static startQueueCleaner() {
    const task = cron.schedule('0 * * * *', async () => {
      try {
        await MatchingService.cleanExpiredEntries();
        console.log('üßπ Cleaned expired queue entries');
      } catch (error) {
        console.error('Error in queue cleaner cron:', error);
      }
    });

    this.tasks.set('queueCleaner', task);
    console.log('üßπ Started queue cleaner (every hour)');
  }

  /**
   * –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (–∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤)
   */
  private static startFeedbackReminders() {
    const task = cron.schedule('0 */6 * * *', async () => {
      try {
        await NotificationService.sendFeedbackReminders();
        console.log('üìù Sent feedback reminders');
      } catch (error) {
        console.error('Error in feedback reminders cron:', error);
      }
    });

    this.tasks.set('feedbackReminders', task);
    console.log('üìù Started feedback reminders (every 6 hours)');
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∑–∞–¥–∞—á
   */
  static getTasksStatus() {
    const status: Record<string, boolean> = {};

    this.tasks.forEach((task, name) => {
      status[name] = task.getStatus() === 'scheduled';
    });

    return status;
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É
   */
  static startTask(taskName: string) {
    const task = this.tasks.get(taskName);
    if (task) {
      task.start();
      console.log(`‚ñ∂Ô∏è  Started task: ${taskName}`);
    } else {
      console.warn(`Task not found: ${taskName}`);
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É
   */
  static stopTask(taskName: string) {
    const task = this.tasks.get(taskName);
    if (task) {
      task.stop();
      console.log(`‚è∏Ô∏è  Stopped task: ${taskName}`);
    } else {
      console.warn(`Task not found: ${taskName}`);
    }
  }
}
