import jwt, { SignOptions } from 'jsonwebtoken';
import {
  JwtPayload,
  TelegramUser,
  User,
  ExtendedJwtPayload,
  UserRole,
} from '../types/index.js';

export class JwtUtils {
  private static secret: string;
  private static expiresIn: string | number;

  static initialize(secret: string, expiresIn: string | number) {
    this.secret = secret;
    this.expiresIn = expiresIn;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   */
  static generateToken(user: TelegramUser): string {
    const payload: JwtPayload = {
      userId: user.id,
      username: user.username,
      firstName: user.first_name,
      lastName: user.last_name,
    };

    const options: SignOptions = { expiresIn: this.expiresIn };
    return jwt.sign(payload, this.secret, options);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static generateExtendedToken(
    user: User,
    authType: 'email' | 'telegram'
  ): string {
    console.log('üîç generateExtendedToken called with:', {
      userId: user.id,
      telegramId: user.telegramId,
      authType,
    });

    const payload: ExtendedJwtPayload = {
      userId:
        authType === 'telegram'
          ? parseInt(user.telegramId || '0')
          : parseInt(user.id),
      username: user.username,
      firstName: user.firstName || '',
      lastName: user.lastName,
      role: user.role,
      authType,
      // –î–æ–±–∞–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      userDbId: user.id,
    };

    console.log('üîç JWT payload:', payload);

    const options: SignOptions = { expiresIn: this.expiresIn };
    const token = jwt.sign(payload, this.secret, options);

    console.log('üîç Generated token:', token.substring(0, 20) + '...');
    console.log('üîç Token length:', token.length);

    return token;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
   */
  static generateTelegramToken(
    user: TelegramUser,
    role: UserRole = UserRole.USER
  ): string {
    const payload: ExtendedJwtPayload = {
      userId: user.id,
      username: user.username,
      firstName: user.first_name,
      lastName: user.last_name,
      role,
      authType: 'telegram',
    };

    const options: SignOptions = { expiresIn: this.expiresIn };
    return jwt.sign(payload, this.secret, options);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
   */
  static generateTestToken(): string {
    const testUser: TelegramUser = {
      id: 123456789,
      is_bot: false,
      first_name: 'Test',
      last_name: 'User',
      username: 'testuser',
    };

    // –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å middleware
    const payload: ExtendedJwtPayload = {
      userId: testUser.id,
      username: testUser.username,
      firstName: testUser.first_name,
      lastName: testUser.last_name,
      role: UserRole.USER,
      authType: 'telegram',
      userDbId: 'test-user-id', // –¢–µ—Å—Ç–æ–≤—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    };

    const options: SignOptions = { expiresIn: '30d' }; // –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω –Ω–∞ 30 –¥–Ω–µ–π
    return jwt.sign(payload, this.secret, options);
  }

  /**
   * –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç JWT —Ç–æ–∫–µ–Ω
   */
  static verifyToken(token: string): JwtPayload | null {
    try {
      const decoded = jwt.verify(token, this.secret) as JwtPayload;
      return decoded;
    } catch (error) {
      console.error('JWT verification failed:', error);
      return null;
    }
  }

  /**
   * –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π JWT —Ç–æ–∫–µ–Ω
   */
  static verifyExtendedToken(token: string): ExtendedJwtPayload | null {
    try {
      console.log('üîç JwtUtils.verifyExtendedToken called');
      console.log('üîç token format check:', {
        isJWT: token.split('.').length === 3,
        parts: token.split('.').length,
      });

      const decoded = jwt.verify(token, this.secret) as ExtendedJwtPayload;

      console.log('üîç JWT decoded successfully:', {
        userId: decoded.userId,
        userDbId: decoded.userDbId,
        authType: decoded.authType,
        role: decoded.role,
      });

      return decoded;
    } catch (error) {
      console.error('‚ùå Extended JWT verification failed:', error);
      return null;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–æ–∫–µ–Ω–µ
   */
  static hasRole(token: string, requiredRole: UserRole): boolean {
    try {
      const decoded = this.verifyExtendedToken(token);
      if (!decoded) return false;

      // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ä–æ–ª—è–º
      if (decoded.role === UserRole.ADMIN) return true;

      return decoded.role === requiredRole;
    } catch (error) {
      console.error('Role verification failed:', error);
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
   */
  static isAdmin(token: string): boolean {
    return this.hasRole(token, UserRole.ADMIN);
  }

  /**
   * –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç JWT —Ç–æ–∫–µ–Ω –±–µ–∑ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
   */
  static decodeToken(token: string): JwtPayload | null {
    try {
      const decoded = jwt.decode(token) as JwtPayload;
      return decoded;
    } catch (error) {
      console.error('JWT decode failed:', error);
      return null;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω
   */
  static isTokenExpired(token: string): boolean {
    try {
      const decoded = jwt.decode(token) as JwtPayload;
      if (!decoded || !decoded.exp) {
        return true;
      }

      const currentTime = Math.floor(Date.now() / 1000);
      return decoded.exp < currentTime;
    } catch (error) {
      return true;
    }
  }
}
