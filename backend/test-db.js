import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function testDatabase() {
  try {
    console.log('üîç Testing database connection...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await prisma.$connect();
    console.log('‚úÖ Database connection successful');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const userCount = await prisma.users.count();
    console.log(`üìä Users in database: ${userCount}`);

    // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = await prisma.users.upsert({
      where: { telegramId: '999999999' },
      update: {},
      create: {
        id: 'test-user-999',
        telegramId: '999999999',
        username: 'testuser',
        firstName: 'Test',
        lastName: 'User',
        status: 'INTERVIEWER',
        updatedAt: new Date(),
      },
    });

    console.log('‚úÖ Test user created/updated:', testUser);

    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await prisma.users.delete({
      where: { telegramId: '999999999' },
    });

    console.log('‚úÖ Test user deleted');
  } catch (error) {
    console.error('‚ùå Database test failed:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testDatabase();
