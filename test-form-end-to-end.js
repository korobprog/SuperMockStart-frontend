// –¢–µ—Å—Ç end-to-end –¥–ª—è —Ñ–æ—Ä–º—ã
// –ó–∞–ø—É—Å–∫: node test-form-end-to-end.js

const API_BASE = 'http://localhost:3001/api';

async function testFormEndToEnd() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã end-to-end...\n');

  try {
    // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω
    console.log('üì§ –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞');
    const tokenResponse = await fetch(`${API_BASE}/auth/test-token`);

    if (!tokenResponse.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: ${tokenResponse.status}`);
    }

    const tokenData = await tokenResponse.json();
    const token = tokenData.data.token;
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω');

    // –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    console.log('\nüì§ –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã');
    const formData = {
      profession: 'frontend-developer',
      country: 'RU',
      experience: '1-3',
      email: 'test@example.com',
      phone: '+7 (999) 123-45-67',
    };

    const formResponse = await fetch(`${API_BASE}/form`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify(formData),
    });

    if (!formResponse.ok) {
      const errorData = await formResponse.json();
      throw new Error(
        `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã: ${errorData.error || formResponse.status}`
      );
    }

    const formResult = await formResponse.json();
    console.log('‚úÖ –§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:', formResult);

    // –®–∞–≥ 3: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    console.log('\nüì• –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã');
    const getResponse = await fetch(`${API_BASE}/form`, {
      method: 'GET',
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });

    if (!getResponse.ok) {
      const errorData = await getResponse.json();
      throw new Error(
        `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${errorData.error || getResponse.status}`
      );
    }

    const getResult = await getResponse.json();
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã:', getResult);

    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    console.log(`   - –¢–æ–∫–µ–Ω: ${token.substring(0, 20)}...`);
    console.log(`   - –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: ${formData.profession}`);
    console.log(`   - –°—Ç—Ä–∞–Ω–∞: ${formData.country}`);
    console.log(`   - –û–ø—ã—Ç: ${formData.experience}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testFormEndToEnd();
