services:
  # Фронтенд
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    expose:
      - 80
    networks:
      - dokploy-network
    depends_on:
      - backend

  # Бэкенд
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    expose:
      - 3001
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://postgres:krishna1284radha@database:5432/supermock
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=7d
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
      - BOT_USERNAME=${BOT_USERNAME}
      - FRONTEND_URL=${FRONTEND_URL}
      - BACKEND_URL=${BACKEND_URL}
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
    networks:
      - dokploy-network
    depends_on:
      database:
        condition: service_healthy
      db-init:
        condition: service_completed_successfully
    volumes:
      - '../files/backend-logs:/app/logs'

  # База данных PostgreSQL
  database:
    image: postgres:16-alpine
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: krishna1284radha
      POSTGRES_DB: supermock
    networks:
      - dokploy-network
    volumes:
      - '../files/postgres-data:/var/lib/postgresql/data'
    expose:
      - 5432
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d supermock']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Инициализация базы данных
  db-init:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://postgres:krishna1284radha@database:5432/supermock
      - NODE_ENV=production
    networks:
      - dokploy-network
    depends_on:
      database:
        condition: service_healthy
    command: ['./scripts/init-db.sh']
    restart: 'no'

networks:
  dokploy-network:
    external: true 