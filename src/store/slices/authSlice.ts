import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';
import {
  getStoredToken,
  setStoredToken,
  removeStoredToken,
  getStoredUser,
  setStoredUser,
  debouncedGetTestToken,
  cleanupInvalidData,
} from '../../utils/auth';
import { createUserWithAvatar, isDevMode } from '../../utils/avatar';
import { RootState } from '../index';

// –¢–∏–ø—ã
export interface AuthState {
  token: string | null;
  user: any | null;
  loading: boolean;
  error: string | null;
  isAuthenticated: boolean;
}

// –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
const getInitialState = (): AuthState => {
  // –û—á–∏—â–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
  cleanupInvalidData();

  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  const savedToken = getStoredToken();
  const savedUser = getStoredUser();

  return {
    token: savedToken,
    user: savedUser,
    loading: false,
    error: null,
    isAuthenticated: !!savedToken,
  };
};

// Async thunks
export const verifyToken = createAsyncThunk(
  'auth/verifyToken',
  async (_, { getState }) => {
    const state = getState() as { auth: AuthState };
    const token = state.auth.token;

    if (!token) {
      throw new Error('No token found');
    }

    const API_URL = import.meta.env.VITE_API_URL || 'https://api.supermock.ru';

    console.log(
      'üîç Sending verifyToken request with token:',
      token.substring(0, 20) + '...'
    );

    const response = await fetch(`${API_URL}/api/auth/verify`, {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${token}`,
        'Content-Type': 'application/json',
      },
    });

    const data = await response.json();
    console.log('üîç verifyToken response:', data);

    if (!response.ok) {
      throw new Error(data.error || 'Token verification failed');
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    return data;
  }
);

export const loginWithTelegram = createAsyncThunk(
  'auth/loginWithTelegram',
  async (initData: string) => {
    const API_URL = import.meta.env.VITE_API_URL || 'https://api.supermock.ru';

    console.log(
      'üîç Sending loginWithTelegram request with initData:',
      initData.substring(0, 50) + '...'
    );

    const response = await fetch(`${API_URL}/api/auth/telegram`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ initData }),
    });

    const data = await response.json();
    console.log('üîç loginWithTelegram response:', data);

    if (!response.ok) {
      throw new Error(data.error || 'Telegram authentication failed');
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–≤–∞—Ç–∞—Ä–∫–æ–π
    if (data.data?.user || data.user) {
      const user = data.data?.user || data.user;
      const isDev = isDevMode();
      const userWithAvatar = createUserWithAvatar(user, isDev);

      return {
        ...data,
        data: data.data
          ? { ...data.data, user: userWithAvatar }
          : { ...data, user: userWithAvatar },
        user: userWithAvatar,
      };
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    return data;
  }
);

export const getTestToken = createAsyncThunk(
  'auth/getTestToken',
  async (_, { getState }) => {
    const state = getState() as RootState;

    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —É–∂–µ –µ—Å—Ç—å, –Ω–µ –¥–µ–ª–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    if (state.auth.token && state.auth.isAuthenticated) {
      console.log(
        'üîë –¢–æ–∫–µ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞'
      );
      return {
        token: state.auth.token,
        user: state.auth.user,
      };
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º debounce –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    return debouncedGetTestToken(async () => {
      const API_URL =
        import.meta.env.VITE_API_URL || 'https://api.supermock.ru';

      console.log('üîç Sending getTestToken request');

      const response = await fetch(`${API_URL}/api/auth/test-token`);

      const data = await response.json();
      console.log('üîç getTestToken response:', data);

      if (!response.ok) {
        if (response.status === 429) {
          throw new Error('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        throw new Error(
          data.error || `Failed to get test token: ${response.status}`
        );
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–≤–∞—Ç–∞—Ä–∫–æ–π –¥–ª—è dev —Ä–µ–∂–∏–º–∞
      if (data.data?.user || data.user) {
        const user = data.data?.user || data.user;
        const isDev = isDevMode();
        const userWithAvatar = createUserWithAvatar(user, isDev);

        return {
          ...data,
          data: data.data
            ? { ...data.data, user: userWithAvatar }
            : { ...data, user: userWithAvatar },
          user: userWithAvatar,
        };
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
      return data;
    });
  }
);

export const loginWithTelegramWidget = createAsyncThunk(
  'auth/loginWithTelegramWidget',
  async (widgetData: any) => {
    const API_URL = import.meta.env.VITE_API_URL || 'https://api.supermock.ru';

    console.log('üîç Sending loginWithTelegramWidget request:', widgetData);

    const response = await fetch(`${API_URL}/api/auth/telegram-widget`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(widgetData),
    });

    const data = await response.json();
    console.log('üîç loginWithTelegramWidget response:', data);

    if (!response.ok) {
      console.error('‚ùå Backend auth error:', {
        status: response.status,
        statusText: response.statusText,
        error: data.error,
      });
      throw new Error(data.error || 'Invalid Telegram Widget data');
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–≤–∞—Ç–∞—Ä–∫–æ–π
    if (data.data?.user || data.user) {
      const user = data.data?.user || data.user;
      const isDev = isDevMode();
      const userWithAvatar = createUserWithAvatar(user, isDev);

      return {
        ...data,
        data: data.data
          ? { ...data.data, user: userWithAvatar }
          : { ...data, user: userWithAvatar },
        user: userWithAvatar,
      };
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    return data;
  }
);

// Slice
const authSlice = createSlice({
  name: 'auth',
  initialState: getInitialState(),
  reducers: {
    setToken: (state, action: PayloadAction<string>) => {
      state.token = action.payload;
      state.isAuthenticated = true;
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç—É
      setStoredToken(action.payload);
    },
    setUser: (state, action: PayloadAction<any>) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (
        action.payload &&
        typeof action.payload === 'object' &&
        action.payload.id &&
        action.payload.first_name
      ) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞–≤–∞—Ç–∞—Ä–∫–æ–π
        const isDev = isDevMode();
        const userWithAvatar = createUserWithAvatar(action.payload, isDev);

        state.user = userWithAvatar;
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç—É
        setStoredUser(userWithAvatar);
      } else {
        console.error(
          '–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:',
          action.payload
        );
        state.user = null;
        // –û—á–∏—â–∞–µ–º localStorage
        localStorage.removeItem('user');
        localStorage.removeItem('userId');
      }
    },
    logout: (state) => {
      state.token = null;
      state.user = null;
      state.isAuthenticated = false;
      state.error = null;
      // –û—á–∏—â–∞–µ–º localStorage —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç—É
      removeStoredToken();
    },
    clearError: (state) => {
      state.error = null;
    },
  },
  extraReducers: (builder) => {
    // verifyToken
    builder
      .addCase(verifyToken.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(verifyToken.fulfilled, (state, action) => {
        state.loading = false;

        // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log('verifyToken.fulfilled payload:', action.payload);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        if (action.payload && typeof action.payload === 'object') {
          // –ï—Å–ª–∏ payload —Å–æ–¥–µ—Ä–∂–∏—Ç data —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
          if (action.payload.data && typeof action.payload.data === 'object') {
            const userData = action.payload.data;
            if (userData.id && userData.first_name) {
              state.user = userData;
              state.isAuthenticated = true;
              setStoredUser(userData);
              console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω:', userData);
            } else {
              console.error(
                '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ payload.data:',
                userData
              );
              state.user = null;
              state.isAuthenticated = false;
            }
          }
          // –ï—Å–ª–∏ payload –Ω–∞–ø—Ä—è–º—É—é —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
          else if (action.payload.id && action.payload.first_name) {
            state.user = action.payload;
            state.isAuthenticated = true;
            setStoredUser(action.payload);
            console.log(
              '‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω (legacy):',
              action.payload
            );
          }
          // –ï—Å–ª–∏ payload —Å–æ–¥–µ—Ä–∂–∏—Ç success: false
          else if (action.payload.success === false) {
            console.error(
              '‚ùå –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å:',
              action.payload.error
            );
            state.user = null;
            state.isAuthenticated = false;
            state.token = null;
            removeStoredToken();
          }
          // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ payload
          else {
            console.error('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ payload:', action.payload);
            state.user = null;
            state.isAuthenticated = false;
          }
        } else {
          console.error(
            '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π payload –∏–∑ verifyToken:',
            action.payload
          );
          state.user = null;
          state.isAuthenticated = false;
        }
      })
      .addCase(verifyToken.rejected, (state, action) => {
        state.loading = false;
        const errorMessage =
          action.error.message || 'Token verification failed';
        state.error = errorMessage;
        state.isAuthenticated = false;
        state.user = null;
        // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        state.token = null;
        removeStoredToken();
        console.error('‚ùå verifyToken.rejected:', {
          error: action.error,
          message: errorMessage,
          payload: action.payload,
        });
      });

    // loginWithTelegram
    builder
      .addCase(loginWithTelegram.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(loginWithTelegram.fulfilled, (state, action) => {
        state.loading = false;

        console.log('üîç loginWithTelegram.fulfilled payload:', action.payload);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        if (action.payload && typeof action.payload === 'object') {
          // –ï—Å–ª–∏ payload —Å–æ–¥–µ—Ä–∂–∏—Ç data —Å —Ç–æ–∫–µ–Ω–æ–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
          if (
            action.payload.data &&
            action.payload.data.token &&
            action.payload.data.user
          ) {
            const { token, user } = action.payload.data;
            if (user && user.id && user.first_name) {
              state.token = token;
              state.user = user;
              state.isAuthenticated = true;
              setStoredToken(token);
              setStoredUser(user);
              console.log('‚úÖ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', user);
            } else {
              console.error(
                '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ loginWithTelegram:',
                user
              );
              state.user = null;
              state.isAuthenticated = false;
            }
          }
          // –ï—Å–ª–∏ payload –Ω–∞–ø—Ä—è–º—É—é —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
          else if (action.payload.token && action.payload.user) {
            const { token, user } = action.payload;
            if (user && user.id && user.first_name) {
              state.token = token;
              state.user = user;
              state.isAuthenticated = true;
              setStoredToken(token);
              setStoredUser(user);
              console.log('‚úÖ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ (legacy):', user);
            } else {
              console.error(
                '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ loginWithTelegram (legacy):',
                user
              );
              state.user = null;
              state.isAuthenticated = false;
            }
          }
          // –ï—Å–ª–∏ payload —Å–æ–¥–µ—Ä–∂–∏—Ç success: false
          else if (action.payload.success === false) {
            console.error(
              '‚ùå Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å:',
              action.payload.error
            );
            state.user = null;
            state.isAuthenticated = false;
          }
          // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ payload
          else {
            console.error(
              '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ payload –≤ loginWithTelegram:',
              action.payload
            );
            state.user = null;
            state.isAuthenticated = false;
          }
        } else {
          console.error(
            '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π payload –∏–∑ loginWithTelegram:',
            action.payload
          );
          state.user = null;
          state.isAuthenticated = false;
        }
      })
      .addCase(loginWithTelegram.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message || 'Telegram authentication failed';
      });

    // loginWithTelegramWidget
    builder
      .addCase(loginWithTelegramWidget.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(loginWithTelegramWidget.fulfilled, (state, action) => {
        state.loading = false;

        console.log(
          'üîç loginWithTelegramWidget.fulfilled payload:',
          action.payload
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        if (action.payload && typeof action.payload === 'object') {
          // –ï—Å–ª–∏ payload —Å–æ–¥–µ—Ä–∂–∏—Ç data —Å —Ç–æ–∫–µ–Ω–æ–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
          if (
            action.payload.data &&
            action.payload.data.token &&
            action.payload.data.user
          ) {
            const { token, user } = action.payload.data;
            if (user && user.id && user.first_name) {
              state.token = token;
              state.user = user;
              state.isAuthenticated = true;
              setStoredToken(token);
              setStoredUser(user);
              console.log('‚úÖ Telegram Widget –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', user);
            } else {
              console.error(
                '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ loginWithTelegramWidget:',
                user
              );
              state.user = null;
              state.isAuthenticated = false;
            }
          }
          // –ï—Å–ª–∏ payload –Ω–∞–ø—Ä—è–º—É—é —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
          else if (action.payload.token && action.payload.user) {
            const { token, user } = action.payload;
            if (user && user.id && user.first_name) {
              state.token = token;
              state.user = user;
              state.isAuthenticated = true;
              setStoredToken(token);
              setStoredUser(user);
              console.log(
                '‚úÖ Telegram Widget –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ (legacy):',
                user
              );
            } else {
              console.error(
                '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ loginWithTelegramWidget (legacy):',
                user
              );
              state.user = null;
              state.isAuthenticated = false;
            }
          }
          // –ï—Å–ª–∏ payload —Å–æ–¥–µ—Ä–∂–∏—Ç success: false
          else if (action.payload.success === false) {
            console.error(
              '‚ùå Telegram Widget –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å:',
              action.payload.error
            );
            state.user = null;
            state.isAuthenticated = false;
          }
          // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ payload
          else {
            console.error(
              '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ payload –≤ loginWithTelegramWidget:',
              action.payload
            );
            state.user = null;
            state.isAuthenticated = false;
          }
        } else {
          console.error(
            '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π payload –∏–∑ loginWithTelegramWidget:',
            action.payload
          );
          state.user = null;
          state.isAuthenticated = false;
        }
      })
      .addCase(loginWithTelegramWidget.rejected, (state, action) => {
        state.loading = false;
        state.error =
          action.error.message || 'Telegram Widget authentication failed';
      });

    // getTestToken
    builder
      .addCase(getTestToken.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(getTestToken.fulfilled, (state, action) => {
        state.loading = false;

        console.log('üîç getTestToken.fulfilled payload:', action.payload);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        if (action.payload && typeof action.payload === 'object') {
          // –ï—Å–ª–∏ payload —Å–æ–¥–µ—Ä–∂–∏—Ç data —Å —Ç–æ–∫–µ–Ω–æ–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
          if (
            action.payload.data &&
            action.payload.data.token &&
            action.payload.data.user
          ) {
            const { token, user } = action.payload.data;
            if (user && user.id && user.first_name) {
              state.token = token;
              state.user = user;
              state.isAuthenticated = true;
              setStoredToken(token);
              setStoredUser(user);
              console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:', user);
            } else {
              console.error(
                '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ getTestToken:',
                user
              );
              state.user = null;
              state.isAuthenticated = false;
            }
          }
          // –ï—Å–ª–∏ payload –Ω–∞–ø—Ä—è–º—É—é —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
          else if (action.payload.token && action.payload.user) {
            const { token, user } = action.payload;
            if (user && user.id && user.first_name) {
              state.token = token;
              state.user = user;
              state.isAuthenticated = true;
              setStoredToken(token);
              setStoredUser(user);
              console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω (legacy):', user);
            } else {
              console.error(
                '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ getTestToken (legacy):',
                user
              );
              state.user = null;
              state.isAuthenticated = false;
            }
          }
          // –ï—Å–ª–∏ payload —Å–æ–¥–µ—Ä–∂–∏—Ç success: false
          else if (action.payload.success === false) {
            console.error(
              '‚ùå –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å:',
              action.payload.error
            );
            state.user = null;
            state.isAuthenticated = false;
          }
          // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ payload
          else {
            console.error(
              '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ payload –≤ getTestToken:',
              action.payload
            );
            state.user = null;
            state.isAuthenticated = false;
          }
        } else {
          console.error(
            '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π payload –∏–∑ getTestToken:',
            action.payload
          );
          state.user = null;
          state.isAuthenticated = false;
        }
      })
      .addCase(getTestToken.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message || 'Failed to get test token';
      });
  },
});

export const { setToken, setUser, logout, clearError } = authSlice.actions;
export default authSlice.reducer;
