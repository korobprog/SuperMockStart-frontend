import React, { useState, useEffect } from 'react';
import { Button } from './ui/button';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from './ui/card';

const DebugAuth: React.FC = () => {
  const [debugInfo, setDebugInfo] = useState<any>({});
  const [loading, setLoading] = useState(false);
  const [testResult, setTestResult] = useState<string>('');

  useEffect(() => {
    // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const info = {
      userAgent: navigator.userAgent,
      isInTelegram: !!window.Telegram?.WebApp,
      telegramWebApp: window.Telegram?.WebApp ? '–¥–æ—Å—Ç—É–ø–µ–Ω' : '–Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω',
      envVars: {
        VITE_API_URL:
          import.meta.env.VITE_API_URL || 'https://api.supermock.ru',
        VITE_TELEGRAM_BOT_USERNAME:
          import.meta.env.VITE_TELEGRAM_BOT_USERNAME || '–Ω–µ –∑–∞–¥–∞–Ω',
        NODE_ENV: import.meta.env.NODE_ENV || '–Ω–µ –∑–∞–¥–∞–Ω',
        DEV: import.meta.env.DEV,
        PROD: import.meta.env.PROD,
      },
      localStorage: {
        telegram_token: localStorage.getItem('telegram_token') ? '–µ—Å—Ç—å' : '–Ω–µ—Ç',
      },
      location: {
        href: window.location.href,
        origin: window.location.origin,
        pathname: window.location.pathname,
      },
    };

    setDebugInfo(info);
  }, []);

  const testBackendConnection = async () => {
    setLoading(true);
    setTestResult('');

    try {
      const API_URL =
        import.meta.env.VITE_API_URL || 'https://api.supermock.ru';

      const response = await fetch(`${API_URL}/api/auth/test`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        const data = await response.json();
        setTestResult(`‚úÖ –ë—ç–∫–µ–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω: ${JSON.stringify(data, null, 2)}`);
      } else {
        setTestResult(
          `‚ùå –û—à–∏–±–∫–∞ –±—ç–∫–µ–Ω–¥–∞: ${response.status} ${response.statusText}`
        );
      }
    } catch (error) {
      setTestResult(
        `‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${
          error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        }`
      );
    } finally {
      setLoading(false);
    }
  };

  const testTelegramAuth = async () => {
    setLoading(true);
    setTestResult('');

    try {
      if (!window.Telegram?.WebApp) {
        setTestResult('‚ùå Telegram Web App –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
        setLoading(false);
        return;
      }

      const tg = window.Telegram.WebApp;
      const initData = tg.initData;
      const user = tg.initDataUnsafe?.user;

      setTestResult(`‚úÖ Telegram Web App –¥–æ—Å—Ç—É–ø–µ–Ω:
initData: ${initData ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}
user: ${user ? JSON.stringify(user, null, 2) : '–Ω–µ—Ç'}`);
    } catch (error) {
      setTestResult(
        `‚ùå –û—à–∏–±–∫–∞ Telegram: ${
          error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        }`
      );
    } finally {
      setLoading(false);
    }
  };

  const clearStorage = () => {
    localStorage.removeItem('telegram_token');
    setDebugInfo((prev: any) => ({
      ...prev,
      localStorage: {
        telegram_token: '–Ω–µ—Ç',
      },
    }));
    setTestResult('‚úÖ localStorage –æ—á–∏—â–µ–Ω');
  };

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      <div className="max-w-4xl mx-auto space-y-6">
        <Card>
          <CardHeader>
            <CardTitle>üîç –û—Ç–ª–∞–¥–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram</CardTitle>
            <CardDescription>
              –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <Button
                  onClick={testBackendConnection}
                  disabled={loading}
                  className="w-full"
                >
                  {loading ? '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...' : '–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—ç–∫–µ–Ω–¥—É'}
                </Button>
                <Button
                  onClick={testTelegramAuth}
                  disabled={loading}
                  className="w-full"
                >
                  {loading ? '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...' : '–¢–µ—Å—Ç Telegram Web App'}
                </Button>
              </div>

              <Button
                onClick={clearStorage}
                variant="outline"
                className="w-full"
              >
                –û—á–∏—Å—Ç–∏—Ç—å localStorage
              </Button>

              {testResult && (
                <div className="bg-gray-100 p-4 rounded-lg">
                  <h3 className="font-semibold mb-2">–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞:</h3>
                  <pre className="text-sm whitespace-pre-wrap">
                    {testResult}
                  </pre>
                </div>
              )}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {Object.entries(debugInfo).map(([key, value]) => (
                <div key={key}>
                  <h4 className="font-semibold text-sm text-gray-700 mb-2">
                    {key}:
                  </h4>
                  <pre className="text-xs bg-gray-100 p-2 rounded overflow-auto">
                    {JSON.stringify(value, null, 2)}
                  </pre>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2 text-sm">
              <div className="p-3 bg-blue-50 rounded-lg">
                <strong>–ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è:</strong>
                <ul className="list-disc list-inside mt-1 ml-4">
                  <li>
                    –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª env.local —Å–æ–∑–¥–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏
                    –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
                  </li>
                  <li>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3001</li>
                  <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫</li>
                </ul>
              </div>

              <div className="p-3 bg-yellow-50 rounded-lg">
                <strong>–ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:</strong>
                <ul className="list-disc list-inside mt-1 ml-4">
                  <li>–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram —á–µ—Ä–µ–∑ @SuperMock_bot</li>
                  <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ</li>
                  <li>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–æ–º–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</li>
                </ul>
              </div>

              <div className="p-3 bg-green-50 rounded-lg">
                <strong>–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</strong>
                <ul className="list-disc list-inside mt-1 ml-4">
                  <li>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ngrok –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏</li>
                  <li>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ Telegram Bot API –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞</li>
                  <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±—ç–∫–µ–Ω–¥–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫</li>
                </ul>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default DebugAuth;
