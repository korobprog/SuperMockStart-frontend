import React, { useEffect, useRef } from 'react';
import {
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
  ModernCard,
} from './ui/card';
import {
  getBotUsername,
  getBotInfo,
  logBotConfig,
} from '../utils/telegramConfig';

interface TelegramUser {
  id: number;
  first_name: string;
  last_name?: string;
  username?: string;
  photo_url?: string;
  auth_date: number;
  hash: string;
}

interface TelegramLoginWidgetProps {
  onAuthSuccess?: (user: TelegramUser, token: string) => void;
  onAuthError?: (error: string) => void;
  className?: string;
  botUsername?: string;
}

declare global {
  interface Window {
    TelegramLoginWidget: {
      dataOnauth: (user: TelegramUser) => void;
    };
  }
}

const TelegramLoginWidget: React.FC<TelegramLoginWidgetProps> = ({
  onAuthSuccess,
  onAuthError,
  className = '',
  botUsername,
}) => {
  const widgetRef = useRef<HTMLDivElement>(null);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–æ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const getCurrentBotUsername = () => {
    if (botUsername) return botUsername;
    return getBotUsername();
  };

  useEffect(() => {
    const currentBotUsername = getCurrentBotUsername();

    // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    logBotConfig();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º Telegram Login Widget —Å–∫—Ä–∏–ø—Ç
    const script = document.createElement('script');
    script.src = 'https://telegram.org/js/telegram-widget.js?22';
    script.setAttribute('data-telegram-login', currentBotUsername);
    script.setAttribute('data-size', 'large');
    script.setAttribute('data-auth-url', window.location.origin);
    script.setAttribute('data-request-access', 'write');
    script.setAttribute('data-lang', 'ru');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    window.TelegramLoginWidget = {
      dataOnauth: async (user: TelegramUser) => {
        try {
          console.log('üîê Telegram Login Widget auth success:', user);
          console.log('ü§ñ Using bot:', currentBotUsername);

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –±—ç–∫–µ–Ω–¥ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
          const response = await fetch(
            `${
              import.meta.env.VITE_API_URL || 'https://api.supermock.ru'
            }/api/auth/telegram`,
            {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                initData: window.location.search.substring(1), // –ü–æ–ª—É—á–∞–µ–º initData –∏–∑ URL
                user: user,
                botUsername: currentBotUsername, // –ü–µ—Ä–µ–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
              }),
            }
          );

          if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
          }

          const data = await response.json();

          if (data.success) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ–∫–µ–Ω
            localStorage.setItem('telegram_user', JSON.stringify(user));
            localStorage.setItem('telegram_token', data.token);
            localStorage.setItem('telegram_bot_username', currentBotUsername);

            onAuthSuccess?.(user, data.token);
            console.log('‚úÖ Auth successful, token saved');
          } else {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
          }
        } catch (error) {
          console.error('‚ùå Telegram Login Widget auth error:', error);
          onAuthError?.(
            error instanceof Error ? error.message : 'Unknown error'
          );
        }
      },
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –≤ DOM
    if (widgetRef.current) {
      widgetRef.current.appendChild(script);
    }

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      if (script.parentNode) {
        script.parentNode.removeChild(script);
      }
    };
  }, [botUsername, onAuthSuccess, onAuthError]);

  const currentBotUsername = getCurrentBotUsername();
  const botInfo = getBotInfo();

  return (
    <ModernCard className={`max-w-md mx-auto ${className}`}>
      <CardHeader>
        <CardTitle className="text-center">
          üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
        </CardTitle>
        <CardDescription className="text-center">
          –í–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ Telegram –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
            <p className="text-sm text-blue-700">
              ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Telegram Login Widget –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            </p>
            <p className="text-xs text-blue-600 mt-1">
              ü§ñ –ë–æ—Ç: {currentBotUsername} ({botInfo.environment.toUpperCase()})
            </p>
          </div>

          <div ref={widgetRef} className="flex justify-center">
            {/* Telegram Login Widget –±—É–¥–µ—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω —Å—é–¥–∞ */}
          </div>

          <div className="text-xs text-gray-500 text-center">
            –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Telegram API
          </div>
        </div>
      </CardContent>
    </ModernCard>
  );
};

export default TelegramLoginWidget;
