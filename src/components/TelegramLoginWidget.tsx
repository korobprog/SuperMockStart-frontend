import React, { useEffect, useRef } from 'react';
import { useDispatch } from 'react-redux';
import { loginWithTelegramWidget } from '../store/slices/authSlice';

interface TelegramLoginWidgetProps {
  onAuthSuccess?: (user: any) => void;
  onAuthError?: (error: string) => void;
  className?: string;
}

declare global {
  interface Window {
    TelegramLoginWidget: {
      dataOnauth: (user: any) => void;
    };
  }
}

const TelegramLoginWidget: React.FC<TelegramLoginWidgetProps> = ({
  onAuthSuccess,
  onAuthError,
  className = '',
}) => {
  const widgetRef = useRef<HTMLDivElement>(null);
  const dispatch = useDispatch();

  useEffect(() => {
    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const botUsername =
      import.meta.env.VITE_TELEGRAM_BOT_USERNAME || 'SuperMock_bot';

    // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è callback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π URL —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º
    const callbackUrl = `${window.location.protocol}//${window.location.host}/auth-callback`;

    // –î–ª—è production –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTPS
    const finalCallbackUrl =
      import.meta.env.VITE_NODE_ENV === 'production'
        ? callbackUrl.replace('http://', 'https://')
        : callbackUrl;

    console.log('üîó Telegram Login Widget callback URL:', finalCallbackUrl);
    console.log('ü§ñ Bot username:', botUsername);
    console.log('üåê Current location:', window.location.href);
    console.log('üîß Protocol:', window.location.protocol);
    console.log('üè† Host:', window.location.host);
    console.log('üåç Environment:', import.meta.env.VITE_NODE_ENV);

    // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è Telegram Login Widget
    const script = document.createElement('script');
    script.async = true;
    script.src = 'https://telegram.org/js/telegram-widget.js?22';
    script.setAttribute('data-telegram-login', botUsername);
    script.setAttribute('data-size', 'large');
    script.setAttribute('data-auth-url', finalCallbackUrl);
    script.setAttribute('data-request-access', 'write');
    script.setAttribute('data-userpic', 'false');
    script.setAttribute('data-lang', 'ru');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const handleAuth = async (user: any) => {
      console.log('‚úÖ Telegram Login Widget auth success:', user);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º
      if (!user || typeof user !== 'object') {
        console.error('‚ùå Invalid user data received:', user);
        onAuthError?.('–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
      }

      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Telegram
        if (!user.id || !user.first_name || !user.auth_date || !user.hash) {
          console.error('‚ùå Missing required user fields:', user);
          onAuthError?.('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
          return;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ Redux –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        const result = await dispatch(loginWithTelegramWidget(user) as any);

        if (result.meta?.requestStatus === 'fulfilled') {
          console.log('‚úÖ Telegram Widget authentication successful');
          onAuthSuccess?.(user);
        } else {
          console.error('‚ùå Telegram Widget authentication failed');
          onAuthError?.('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram Widget');
        }
      } catch (error) {
        console.error('‚ùå Error during Telegram Widget authentication:', error);
        onAuthError?.('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram Widget');
      }
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ window —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    window.TelegramLoginWidget = {
      dataOnauth: (user: any) => {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º handleAuth
        if (user && typeof user === 'object') {
          handleAuth(user);
        } else {
          console.error('‚ùå Invalid user data in dataOnauth:', user);
          onAuthError?.('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        }
      },
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞
    script.onerror = () => {
      console.error('‚ùå Failed to load Telegram Login Widget script');
      onAuthError?.('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–∂–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram');
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –≤ DOM
    if (widgetRef.current) {
      widgetRef.current.appendChild(script);
    }

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      if (script.parentNode) {
        script.parentNode.removeChild(script);
      }
      (window as any).TelegramLoginWidget = undefined;
    };
  }, [onAuthSuccess, onAuthError, dispatch]);

  return (
    <div className={`telegram-login-widget ${className}`}>
      <div className="text-center mb-4">
        <h3 className="text-lg font-semibold mb-2">–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram</h3>
        <p className="text-sm text-muted-foreground mb-4">
          –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram
        </p>
      </div>
      <div ref={widgetRef} className="flex justify-center" />
    </div>
  );
};

export default TelegramLoginWidget;
