import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Button } from '../components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card';
import { Alert, AlertDescription } from '../components/ui/alert';

const TelegramAuthFix: React.FC = () => {
  const [loading, setLoading] = useState(false);
  const [step, setStep] = useState<
    'initial' | 'checking' | 'fixing' | 'success' | 'error'
  >('initial');
  const [error, setError] = useState<string>('');
  const [logs, setLogs] = useState<string[]>([]);
  const navigate = useNavigate();

  const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001';

  const addLog = (message: string) => {
    setLogs((prev) => [
      ...prev,
      `${new Date().toLocaleTimeString()}: ${message}`,
    ]);
  };

  const checkCurrentAuth = async () => {
    try {
      setLoading(true);
      setStep('checking');
      addLog('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');

      const telegramToken = localStorage.getItem('telegram_token');
      const authToken = localStorage.getItem('authToken');
      const userId = localStorage.getItem('userId');

      addLog(`üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã:`);
      addLog(`  - telegram_token: ${telegramToken ? '‚úÖ' : '‚ùå'}`);
      addLog(`  - authToken: ${authToken ? '‚úÖ' : '‚ùå'}`);
      addLog(`  - userId: ${userId || '‚ùå'}`);

      if (!telegramToken && !authToken) {
        addLog('‚ùå –¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ');
        setStep('fixing');
        await createNewToken();
      } else {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
        addLog('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞...');
        const isValid = await validateToken(telegramToken || authToken || '');

        if (isValid) {
          addLog('‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω');
          setStep('success');
        } else {
          addLog('‚ùå –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π');
          setStep('fixing');
          await createNewToken();
        }
      }
    } catch (error) {
      addLog(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error}`);
      setError(error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      setStep('error');
    } finally {
      setLoading(false);
    }
  };

  const validateToken = async (token: string): Promise<boolean> => {
    try {
      const response = await fetch(`${API_URL}/api/auth/validate-token`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
      });

      return response.ok;
    } catch (error) {
      addLog(`‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: ${error}`);
      return false;
    }
  };

  const createNewToken = async () => {
    try {
      addLog('üîÑ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω...');

      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω
      const response = await fetch(`${API_URL}/api/auth/test-token`);
      const data = await response.json();

      if (data.success) {
        addLog('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
        localStorage.setItem('telegram_token', data.data.token);
        localStorage.setItem('authToken', data.data.token);
        localStorage.setItem('userId', data.data.user.id.toString());
        localStorage.setItem('telegramUser', JSON.stringify(data.data.user));

        addLog(`üìù –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${data.data.user.id}`);
        setStep('success');
      } else {
        throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞');
      }
    } catch (error) {
      addLog(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: ${error}`);
      setError(error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      setStep('error');
    }
  };

  const clearAllTokens = () => {
    addLog('üßπ –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã...');
    localStorage.removeItem('telegram_token');
    localStorage.removeItem('authToken');
    localStorage.removeItem('extended_token');
    localStorage.removeItem('userId');
    localStorage.removeItem('telegramUser');
    addLog('‚úÖ –í—Å–µ —Ç–æ–∫–µ–Ω—ã –æ—á–∏—â–µ–Ω—ã');
    setStep('initial');
    setLogs([]);
  };

  const goToTokenCheck = () => {
    navigate('/token-check');
  };

  const goToAuth = () => {
    navigate('/auth');
  };

  const retry = () => {
    setStep('initial');
    setError('');
    setLogs([]);
  };

  return (
    <div className="container mx-auto p-6 space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <Alert className="bg-blue-50 border-blue-200">
            <AlertDescription>
              –≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–º–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å
              –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ Telegram. –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç —Ç–µ–∫—É—â–∏–µ —Ç–æ–∫–µ–Ω—ã –∏ –ø—Ä–∏
              –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—ã–µ.
            </AlertDescription>
          </Alert>

          <div className="flex flex-wrap gap-2">
            <Button
              onClick={checkCurrentAuth}
              disabled={loading}
              variant="default"
              className="bg-green-600 hover:bg-green-700"
            >
              {loading ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                  {step === 'checking'
                    ? '–ü—Ä–æ–≤–µ—Ä–∫–∞...'
                    : step === 'fixing'
                    ? '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...'
                    : '–û–±—Ä–∞–±–æ—Ç–∫–∞...'}
                </>
              ) : (
                'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é'
              )}
            </Button>

            <Button onClick={clearAllTokens} variant="outline">
              üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–æ–∫–µ–Ω—ã
            </Button>

            <Button onClick={goToTokenCheck} variant="outline">
              üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏
            </Button>

            <Button onClick={goToAuth} variant="outline">
              üîê –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            </Button>
          </div>

          {step === 'success' && (
            <Alert className="bg-green-50 border-green-200">
              <AlertDescription>
                ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
                –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
              </AlertDescription>
            </Alert>
          )}

          {step === 'error' && (
            <Alert className="bg-red-50 border-red-200">
              <AlertDescription>
                ‚ùå –û—à–∏–±–∫–∞: {error}
                <div className="mt-2">
                  <Button onClick={retry} variant="outline" size="sm">
                    –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                  </Button>
                </div>
              </AlertDescription>
            </Alert>
          )}

          {logs.length > 0 && (
            <div className="mt-4">
              <h3 className="font-semibold mb-2">üìã –õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π:</h3>
              <div className="bg-gray-100 p-4 rounded text-sm max-h-64 overflow-y-auto">
                {logs.map((log, index) => (
                  <div key={index} className="mb-1">
                    {log}
                  </div>
                ))}
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default TelegramAuthFix;
