import React, { useEffect, useState } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { useDispatch } from 'react-redux';
import { setToken, setUser } from '../store/slices/authSlice';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '../components/ui/card';
import LoadingSpinner from '../components/LoadingSpinner';
import BackgroundGradient from '../components/BackgroundGradient';

const TelegramAuthCallback: React.FC = () => {
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  console.log('üöÄ TelegramAuthCallback component loaded');
  console.log('üîó Current URL:', window.location.href);
  console.log('üìã Search params:', Object.fromEntries(searchParams.entries()));

  useEffect(() => {
    const handleAuthCallback = async () => {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL
        const id = searchParams.get('id') || searchParams.get('userId');
        const firstName =
          searchParams.get('first_name') || searchParams.get('firstName');
        const lastName =
          searchParams.get('last_name') || searchParams.get('lastName');
        const username = searchParams.get('username');
        const photoUrl =
          searchParams.get('photo_url') || searchParams.get('photoUrl');
        const authDate =
          searchParams.get('auth_date') || searchParams.get('authDate');
        const hash = searchParams.get('hash');

        console.log('üì• Telegram Auth Callback received:', {
          id,
          firstName,
          lastName,
          username,
          photoUrl,
          authDate,
          hash,
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if (!id || !firstName || !authDate || !hash) {
          setError('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
          setLoading(false);
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç
        const authTimestamp = parseInt(authDate);
        const currentTime = Date.now() / 1000;
        const fiveMinutes = 5 * 60;

        if (currentTime - authTimestamp > fiveMinutes) {
          setError('–°—Å—ã–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∞');
          setLoading(false);
          return;
        }

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        const user = {
          id: parseInt(id),
          first_name: firstName,
          last_name: lastName || '',
          username: username || '',
          photo_url: photoUrl || '',
        };

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ backend –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞
        const API_URL =
          import.meta.env.VITE_API_URL || 'https://api.supermock.ru';

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const authData = {
          id: user.id,
          first_name: user.first_name,
          last_name: user.last_name || '',
          username: user.username || '',
          photo_url: user.photo_url || '',
          auth_date: parseInt(authDate),
          hash: hash,
        };

        console.log('üì§ Sending auth data to backend:', authData);

        try {
          const response = await fetch(`${API_URL}/api/auth/telegram-widget`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(authData),
          });

          if (!response.ok) {
            let errorMessage = `HTTP error! status: ${response.status}`;
            try {
              const errorData = await response.json();
              errorMessage =
                errorData.error || errorData.message || errorMessage;
            } catch (parseError) {
              console.error('Failed to parse error response:', parseError);
            }

            console.error('‚ùå Backend auth error:', {
              status: response.status,
              statusText: response.statusText,
              error: errorMessage,
            });

            throw new Error(errorMessage);
          }

          const data = await response.json();

          console.log('üì• Response from backend:', data);

          if (data.success) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ JWT —Ç–æ–∫–µ–Ω –≤ localStorage
            localStorage.setItem('user', JSON.stringify(user));
            localStorage.setItem('authToken', data.data.token);
            localStorage.setItem('telegram_token', data.data.token); // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

            console.log('üíæ Saved to localStorage:', {
              user: user,
              authToken: data.data.token ? 'present' : 'missing',
              telegram_token: data.data.token ? 'present' : 'missing',
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º Redux store
            dispatch(setToken(data.data.token));
            dispatch(setUser(user));

            console.log(
              '‚úÖ User authenticated successfully with JWT token:',
              user
            );

            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
            setTimeout(() => {
              navigate('/');
            }, 1000);
          } else {
            throw new Error(data.error || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
          }
        } catch (error) {
          console.error('‚ùå Error getting JWT token:', error);
          setError(
            error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
          );
          setLoading(false);
        }
      } catch (error) {
        console.error('‚ùå Error processing auth callback:', error);
        setError('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        setLoading(false);
      }
    };

    handleAuthCallback();
  }, [searchParams, navigate, dispatch]);

  if (loading) {
    return (
      <BackgroundGradient className="min-h-screen flex items-center justify-center">
        <Card className="max-w-md mx-auto">
          <CardContent className="p-6">
            <LoadingSpinner message="–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏..." />
          </CardContent>
        </Card>
      </BackgroundGradient>
    );
  }

  if (error) {
    return (
      <BackgroundGradient className="min-h-screen flex items-center justify-center">
        <Card className="max-w-md mx-auto">
          <CardHeader>
            <CardTitle className="text-red-600">–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</CardTitle>
            <CardDescription>{error}</CardDescription>
          </CardHeader>
          <CardContent>
            <button
              onClick={() => navigate('/')}
              className="w-full bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded"
            >
              –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
            </button>
          </CardContent>
        </Card>
      </BackgroundGradient>
    );
  }

  return (
    <BackgroundGradient className="min-h-screen flex items-center justify-center">
      <Card className="max-w-md mx-auto">
        <CardHeader>
          <CardTitle className="text-green-600">
            ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!
          </CardTitle>
          <CardDescription>
            –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="text-center">
            <div className="w-16 h-16 mx-auto mb-4 rounded-full bg-green-500 flex items-center justify-center">
              <svg
                className="w-8 h-8 text-white"
                viewBox="0 0 24 24"
                fill="currentColor"
              >
                <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z" />
              </svg>
            </div>
            <p className="text-sm text-muted-foreground">
              –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å —á–µ—Ä–µ–∑ Telegram
            </p>
          </div>
        </CardContent>
      </Card>
    </BackgroundGradient>
  );
};

export default TelegramAuthCallback;
