import React, { useEffect, useState } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '../components/ui/card';
import LoadingSpinner from '../components/LoadingSpinner';
import BackgroundGradient from '../components/BackgroundGradient';

const TelegramAuthCallback: React.FC = () => {
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const handleAuthCallback = async () => {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL
        const authId = searchParams.get('auth_id');
        const userId = searchParams.get('id') || authId?.split('_')[0]; // –ò–∑–≤–ª–µ–∫–∞–µ–º userId –∏–∑ auth_id –µ—Å–ª–∏ id –Ω–µ—Ç
        const firstName = searchParams.get('first_name');
        const lastName = searchParams.get('last_name');
        const username = searchParams.get('username');
        const photoUrl = searchParams.get('photo_url');
        const authDate = searchParams.get('auth_date');
        const hash = searchParams.get('hash');

        console.log('üì• Telegram Auth Callback received:', {
          authId,
          userId,
          firstName,
          lastName,
          username,
          photoUrl,
          authDate,
          hash,
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã userId –∏–ª–∏ authId
        if (!userId && !authId) {
          setError('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
          setLoading(false);
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç
        if (authDate) {
          const authTimestamp = parseInt(authDate);
          const currentTime = Date.now() / 1000;
          const fiveMinutes = 5 * 60;

          if (currentTime - authTimestamp > fiveMinutes) {
            setError('–°—Å—ã–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∞');
            setLoading(false);
            return;
          }
        }

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = {
          id: userId ? parseInt(userId) : Date.now(), // –ò—Å–ø–æ–ª—å–∑—É–µ–º timestamp –µ—Å–ª–∏ userId –Ω–µ—Ç
          first_name: firstName || 'User',
          last_name: lastName || '',
          username: username || '',
          photo_url: photoUrl || '',
        };

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const token =
          Math.random().toString(36).substring(2, 15) + Date.now().toString(36);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ–∫–µ–Ω
        localStorage.setItem('telegram_user', JSON.stringify(user));
        localStorage.setItem('telegram_token', token);
        localStorage.setItem('auth_id', authId || '');

        console.log('‚úÖ User authenticated successfully:', user);

        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        setTimeout(() => {
          navigate('/');
        }, 2000);
      } catch (error) {
        console.error('‚ùå Error processing auth callback:', error);
        setError('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      } finally {
        setLoading(false);
      }
    };

    handleAuthCallback();
  }, [searchParams, navigate]);

  if (loading) {
    return (
      <BackgroundGradient className="min-h-screen flex items-center justify-center">
        <Card className="max-w-md mx-auto">
          <CardContent className="p-6">
            <LoadingSpinner message="–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏..." />
          </CardContent>
        </Card>
      </BackgroundGradient>
    );
  }

  if (error) {
    return (
      <BackgroundGradient className="min-h-screen flex items-center justify-center">
        <Card className="max-w-md mx-auto">
          <CardHeader>
            <CardTitle className="text-red-600">–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</CardTitle>
            <CardDescription>{error}</CardDescription>
          </CardHeader>
          <CardContent>
            <button
              onClick={() => navigate('/')}
              className="w-full bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded"
            >
              –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
            </button>
          </CardContent>
        </Card>
      </BackgroundGradient>
    );
  }

  return (
    <BackgroundGradient className="min-h-screen flex items-center justify-center">
      <Card className="max-w-md mx-auto">
        <CardHeader>
          <CardTitle className="text-green-600">
            ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!
          </CardTitle>
          <CardDescription>
            –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="text-center">
            <div className="w-16 h-16 mx-auto mb-4 rounded-full bg-green-500 flex items-center justify-center">
              <svg
                className="w-8 h-8 text-white"
                viewBox="0 0 24 24"
                fill="currentColor"
              >
                <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z" />
              </svg>
            </div>
            <p className="text-sm text-muted-foreground">
              –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å —á–µ—Ä–µ–∑ Telegram
            </p>
          </div>
        </CardContent>
      </Card>
    </BackgroundGradient>
  );
};

export default TelegramAuthCallback;
