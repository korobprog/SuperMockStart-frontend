import React, { useEffect, useState } from 'react';
import { useSearchParams, useNavigate } from 'react-router-dom';
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from '../components/ui/card';
import { Button } from '../components/ui/button';
import LoadingSpinner from '../components/LoadingSpinner';
import { getStoredToken, setStoredToken, setStoredUser } from '../utils/auth';

const TelegramBotAuth: React.FC = () => {
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [authStatus, setAuthStatus] = useState<
    'checking' | 'success' | 'error' | 'manual'
  >('checking');

  useEffect(() => {
    const handleBotAuth = async () => {
      try {
        console.log('üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram Bot...');

        // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        const userId = searchParams.get('userId');
        console.log('üìã userId –∏–∑ URL:', userId);

        if (!userId) {
          throw new Error('userId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ Telegram Web App
        const tg = window.Telegram?.WebApp;

        if (tg) {
          console.log('‚úÖ Telegram Web App –¥–æ—Å—Ç—É–ø–µ–Ω');

          // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram Web App
          const telegramUser = tg.initDataUnsafe?.user;
          const initData = tg.initData;

          console.log('üìã –î–∞–Ω–Ω—ã–µ Telegram:', {
            telegramUser,
            initData: initData ? initData.substring(0, 50) + '...' : null,
          });

          if (telegramUser && initData) {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram Web App
            await authenticateWithTelegram(initData, telegramUser);
          } else {
            console.log('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º userId');
            await authenticateWithUserId(userId);
          }
        } else {
          console.log('‚ùå Telegram Web App –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º userId');
          await authenticateWithUserId(userId);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        setError(error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        setAuthStatus('error');
      } finally {
        setLoading(false);
      }
    };

    handleBotAuth();
  }, [searchParams]);

  const authenticateWithTelegram = async (
    initData: string,
    telegramUser: any
  ) => {
    try {
      console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram Web App...');

      const API_URL =
        import.meta.env.VITE_API_URL || 'https://api.supermock.ru';

      const response = await fetch(`${API_URL}/api/auth/telegram`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ initData }),
      });

      const data = await response.json();
      console.log('üì° –û—Ç–≤–µ—Ç API Telegram:', data);

      if (response.ok && data.success && data.data?.token) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        setStoredToken(data.data.token);
        setStoredUser(data.data.user);

        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram —É—Å–ø–µ—à–Ω–∞');
        setAuthStatus('success');

        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        setTimeout(() => {
          navigate('/', { replace: true });
        }, 1000);
      } else {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram:', error);
      throw error;
    }
  };

  const authenticateWithUserId = async (userId: string) => {
    try {
      console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ userId:', userId);

      const API_URL =
        import.meta.env.VITE_API_URL || 'https://api.supermock.ru';

      const response = await fetch(`${API_URL}/api/telegram-bot/verify-user`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ userId: parseInt(userId) }),
      });

      const data = await response.json();
      console.log('üì° –û—Ç–≤–µ—Ç API userId:', data);

      if (response.ok && data.success && data.data?.token) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        setStoredToken(data.data.token);
        setStoredUser(data.data.user);

        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ userId —É—Å–ø–µ—à–Ω–∞');
        setAuthStatus('success');

        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        setTimeout(() => {
          navigate('/', { replace: true });
        }, 1000);
      } else {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ userId');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ userId:', error);
      setAuthStatus('manual');
      throw error;
    }
  };

  const retryAuth = async () => {
    setLoading(true);
    setError(null);
    setAuthStatus('checking');

    const userId = searchParams.get('userId');
    if (userId) {
      try {
        await authenticateWithUserId(userId);
      } catch (error) {
        setError(error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        setAuthStatus('error');
      }
    }
    setLoading(false);
  };

  const getTestToken = async () => {
    setLoading(true);
    try {
      const API_URL =
        import.meta.env.VITE_API_URL || 'https://api.supermock.ru';
      const response = await fetch(`${API_URL}/api/auth/test-token`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      const data = await response.json();

      if (response.ok && data.success && data.data?.token) {
        setStoredToken(data.data.token);
        setStoredUser(data.data.user);
        setAuthStatus('success');

        setTimeout(() => {
          navigate('/', { replace: true });
        }, 1000);
      } else {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞');
      }
    } catch (error) {
      setError(error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      setAuthStatus('error');
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <LoadingSpinner message="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram Bot..." />
        </div>
      </div>
    );
  }

  if (authStatus === 'success') {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="text-green-500 text-6xl mb-4">‚úÖ</div>
          <h1 className="text-2xl font-bold mb-4">–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</h1>
          <p className="text-gray-600 mb-6">
            –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen flex items-center justify-center p-6">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram Bot</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {error && (
            <div className="p-4 bg-red-50 border border-red-200 rounded-lg">
              <p className="text-red-600">‚ùå –û—à–∏–±–∫–∞: {error}</p>
            </div>
          )}

          <div className="space-y-2">
            <p className="text-sm text-gray-600">
              <strong>UserId:</strong>{' '}
              {searchParams.get('userId') || '–ù–µ –Ω–∞–π–¥–µ–Ω'}
            </p>
            <p className="text-sm text-gray-600">
              <strong>Telegram Web App:</strong>{' '}
              {window.Telegram?.WebApp ? '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
            </p>
          </div>

          <div className="space-y-2">
            <Button onClick={retryAuth} className="w-full" disabled={loading}>
              {loading ? '–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...' : '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é'}
            </Button>

            <Button
              onClick={getTestToken}
              variant="outline"
              className="w-full"
              disabled={loading}
            >
              {loading ? '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...' : '–ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω'}
            </Button>

            <Button
              onClick={() => navigate('/')}
              variant="secondary"
              className="w-full"
            >
              –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
            </Button>
          </div>

          <div className="text-xs text-gray-500 space-y-1">
            <p>üí° –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:</p>
            <ul className="list-disc list-inside ml-4 space-y-1">
              <li>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ —Å—Å—ã–ª–∫—É –∏–∑ Telegram</li>
              <li>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é"</li>
              <li>–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω"</li>
            </ul>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default TelegramBotAuth;
