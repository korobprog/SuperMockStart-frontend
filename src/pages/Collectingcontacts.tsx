import { CardContent } from '../components/ui/card';
import { Button } from '../components/ui/button';
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '../components/ui/select';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '../components/ui/popover';
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandList,
} from '../components/ui/command';
import { Check, ChevronsUpDown, Loader2 } from 'lucide-react';
import LoadingSpinner from '../components/LoadingSpinner';
import { cn } from '../lib/utils';
import { itPositions, ItPosition } from '../data/itPositions';
import { useState, useEffect, useMemo, useCallback, memo } from 'react';
import { countries } from 'countries-list';
import { useForm, Controller } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { useNavigate } from 'react-router-dom';

// –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å Zod
const formSchema = z.object({
  profession: z.string().min(1, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é'),
  country: z.string().min(1, '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É'),
  language: z.string().min(1, '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è'),
  experience: z.string().min(1, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã'),
  email: z.string().email('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email').optional().or(z.literal('')),
  phone: z.string().optional().or(z.literal('')),
});

type FormData = z.infer<typeof formSchema>;

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
const EXPERIENCE_OPTIONS = [
  { value: '0-0', label: '0-0 study' },
  { value: '0-1', label: '0-1 year' },
  { value: '1-3', label: '1-3 years' },
  { value: '3-5', label: '3-5 years' },
  { value: '5-10', label: '5-10 years' },
  { value: '10+', label: '10+ years' },
] as const;

// –Ø–∑—ã–∫–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
const PRIORITY_LANGUAGES = {
  ru: '–†—É—Å—Å–∫–∏–π',
  en: 'English',
  de: 'Deutsch',
  fr: 'Fran√ßais',
  es: 'Espa√±ol',
  pt: 'Portugu√™s',
  it: 'Italiano',
  zh: '‰∏≠Êñá',
  ja: 'Êó•Êú¨Ë™û',
  ko: 'ÌïúÍµ≠Ïñ¥',
  ar: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©',
} as const;

const CollectingContacts = memo(() => {
  const [isAuthenticating, setIsAuthenticating] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [countryOpen, setCountryOpen] = useState(false);
  const [countrySearch, setCountrySearch] = useState('');
  const [isCheckingExistingData, setIsCheckingExistingData] = useState(true);
  const navigate = useNavigate();

  const {
    control,
    handleSubmit,
    formState: { errors, isSubmitting },
    setValue,
    watch,
  } = useForm<FormData>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      profession: '',
      country: '',
      language: '',
      experience: '',
      email: '',
      phone: '',
    },
    mode: 'onChange', // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª–µ–π
  });

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  useEffect(() => {
    const isDevelopment = import.meta.env.DEV;
    if (isDevelopment) {
      console.log('üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É');
      setValue('profession', 'frontend-developer');
      setValue('country', 'RU');
      setValue('language', 'ru');
      setValue('experience', '1-3');
      setValue('email', 'test@example.com');
      setValue('phone', '+7 (999) 123-45-67');
    }
  }, [setValue]);

  // –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    const token =
      localStorage.getItem('extended_token') ||
      localStorage.getItem('telegram_token');

    if (!token) {
      console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è');
      setIsAuthenticating(false);
      return;
    }

    setIsAuthenticating(false);
  }, []);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    const checkExistingFormData = async () => {
      try {
        const token =
          localStorage.getItem('extended_token') ||
          localStorage.getItem('telegram_token');

        if (!token) {
          console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É');
          navigate('/');
          return;
        }

        const apiUrl =
          import.meta.env.VITE_API_URL || 'https://api.supermock.ru';
        const response = await fetch(`${apiUrl}/api/form`, {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        if (response.ok) {
          const data = await response.json();
          console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã:', data);

          // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã (–ø—Ä–æ—Ñ–µ—Å—Å–∏—è –∏ —Å—Ç—Ä–∞–Ω–∞), –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
          if (data.success && data.data.profession && data.data.country) {
            console.log(
              '‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /interview'
            );
            navigate('/interview');
            return;
          } else {
            console.log(
              '‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'
            );
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
          }
        } else {
          console.log(
            '‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É'
          );
          navigate('/');
        }
      } catch (error) {
        console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã:', error);
        navigate('/');
      } finally {
        setIsCheckingExistingData(false);
      }
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    if (!isAuthenticating) {
      checkExistingFormData();
    }
  }, [isAuthenticating, navigate]);

  const onSubmit = useCallback(
    async (data: FormData) => {
      try {
        console.log('üìù –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã:', data);

        const token =
          localStorage.getItem('extended_token') ||
          localStorage.getItem('telegram_token');

        console.log('üîë –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω:', !!token);

        if (!token) {
          setError('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ Telegram.');
          return;
        }

        const apiUrl =
          import.meta.env.VITE_API_URL || 'https://api.supermock.ru';
        console.log('üåê API URL:', apiUrl);

        const response = await fetch(`${apiUrl}/api/form`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${token}`,
          },
          body: JSON.stringify(data),
        });

        console.log('üì§ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);

        if (!response.ok) {
          const errorData = await response.json();
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', errorData);
          throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö');
        }

        const result = await response.json();
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', result);

        navigate('/interview');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã:', error);
        setError(
          error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö'
        );
      }
    },
    [navigate]
  );

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  useEffect(() => {
    const isDevelopment = import.meta.env.DEV;
    if (isDevelopment && !isCheckingExistingData) {
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
      const timer = setTimeout(() => {
        console.log('üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É');
        const formData = {
          profession: 'frontend-developer',
          country: 'RU',
          language: 'ru',
          experience: '1-3',
          email: 'test@example.com',
          phone: '+7 (999) 123-45-67',
        };
        onSubmit(formData);
      }, 3000);

      return () => clearTimeout(timer);
    }
  }, [onSubmit, isCheckingExistingData]);

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω
  const countriesList = useMemo(() => {
    return Object.entries(countries as Record<string, any>)
      .map(([code, country]) => {
        // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–¥–æ –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π)
        let countryName = country.name;
        if (typeof countryName === 'string') {
          countryName = countryName.split(',')[0].split(';')[0].trim();
        }
        return {
          value: code,
          label: countryName,
        };
      })
      .sort((a, b) => a.label.localeCompare(b.label));
  }, []);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
  const filteredCountries = useMemo(() => {
    if (!countrySearch.trim()) return countriesList;
    const search = countrySearch.toLowerCase().trim();
    const filtered = countriesList.filter((country) =>
      country.label.toLowerCase().includes(search)
    );
    console.log(`üîç –ü–æ–∏—Å–∫: "${search}", –Ω–∞–π–¥–µ–Ω–æ: ${filtered.length} —Å—Ç—Ä–∞–Ω`);
    return filtered;
  }, [countriesList, countrySearch]);

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤
  const getLanguagesFromCountry = useCallback((countryCode: string) => {
    const country = (countries as Record<string, any>)[countryCode];
    if (!country || !country.languages) return [];

    return country.languages
      .map((lang: string) => ({
        value: lang,
        label:
          PRIORITY_LANGUAGES[lang as keyof typeof PRIORITY_LANGUAGES] || lang,
      }))
      .sort(
        (
          a: { value: string; label: string },
          b: { value: string; label: string }
        ) => {
          // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —è–∑—ã–∫–∏ —Å–Ω–∞—á–∞–ª–∞
          const aIsPriority = a.value in PRIORITY_LANGUAGES;
          const bIsPriority = b.value in PRIORITY_LANGUAGES;
          if (aIsPriority && !bIsPriority) return -1;
          if (!aIsPriority && bIsPriority) return 1;
          return a.label.localeCompare(b.label);
        }
      );
  }, []);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–æ –≤—Ä–µ–º—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  if (isAuthenticating || isCheckingExistingData) {
    return (
      <LoadingSpinner
        message={
          isAuthenticating
            ? '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...'
            : '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...'
        }
      />
    );
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="bg-red-50 border border-red-200 rounded-lg p-6 max-w-md">
            <h2 className="text-lg font-semibold text-red-800 mb-2">–û—à–∏–±–∫–∞</h2>
            <p className="text-red-600 mb-4">{error}</p>
            <button
              onClick={() => window.location.reload()}
              className="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700"
            >
              –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-2xl mx-auto">
        <CardContent className="bg-white rounded-lg shadow-lg p-8">
          <h1 className="text-3xl font-bold text-center mb-8 text-gray-800">
            –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
          </h1>

          {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ */}
          {import.meta.env.DEV && (
            <div className="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
                <p className="text-blue-800 text-sm">
                  üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: —Ñ–æ—Ä–º–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏
                  –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                </p>
              </div>
            </div>
          )}
          <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
            {/* –í—ã–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ */}
            <div className="space-y-2">
              <label className="text-sm font-medium text-gray-700">
                –ü—Ä–æ—Ñ–µ—Å—Å–∏—è <span className="text-red-500">*</span>
              </label>
              <Controller
                name="profession"
                control={control}
                render={({ field }) => (
                  <Select
                    value={field.value}
                    onValueChange={field.onChange}
                    disabled={isSubmitting}
                  >
                    <SelectTrigger
                      className={cn(
                        'w-full justify-between',
                        errors.profession && 'border-red-400'
                      )}
                    >
                      {isSubmitting ? (
                        <div className="flex items-center gap-2">
                          <Loader2 className="h-4 w-4 animate-spin" />
                          <span>–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                        </div>
                      ) : (
                        <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é..." />
                      )}
                    </SelectTrigger>
                    <SelectContent>
                      <SelectGroup>
                        {itPositions.map((item: ItPosition) => (
                          <SelectItem key={item.value} value={item.value}>
                            {item.label}
                          </SelectItem>
                        ))}
                      </SelectGroup>
                    </SelectContent>
                  </Select>
                )}
              />
              {errors.profession && (
                <p className="text-xs text-red-500 mt-1">
                  {errors.profession.message}
                </p>
              )}
            </div>

            {/* –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã */}
            <div className="space-y-2">
              <label className="text-sm font-medium text-gray-700">
                –°—Ç—Ä–∞–Ω–∞ <span className="text-red-500">*</span>
              </label>
              <Controller
                name="country"
                control={control}
                render={({ field }) => {
                  const selectedCountry = countriesList.find(
                    (country) => country.value === field.value
                  );

                  return (
                    <Popover open={countryOpen} onOpenChange={setCountryOpen}>
                      <PopoverTrigger asChild>
                        <Button
                          variant="outline"
                          role="combobox"
                          aria-expanded={countryOpen}
                          className={cn(
                            'w-full justify-between',
                            errors.country && 'border-red-400'
                          )}
                          disabled={isSubmitting}
                        >
                          {selectedCountry?.label || '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É...'}
                          <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                        </Button>
                      </PopoverTrigger>
                      <PopoverContent
                        className="w-[var(--radix-popover-trigger-width)] p-0"
                        align="start"
                      >
                        <Command shouldFilter={false}>
                          <CommandInput
                            placeholder="–ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω—ã..."
                            value={countrySearch}
                            onValueChange={setCountrySearch}
                          />
                          <CommandList className="max-h-[300px]">
                            {filteredCountries.length === 0 &&
                              countrySearch.trim() && (
                                <CommandEmpty>–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</CommandEmpty>
                              )}
                            <CommandGroup>
                              {(countrySearch.trim()
                                ? filteredCountries
                                : countriesList
                              )
                                .slice(0, 100) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 100 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                                .map((country) => (
                                  <div
                                    key={country.value}
                                    className={cn(
                                      'relative flex cursor-pointer select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none hover:bg-accent hover:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
                                      field.value === country.value &&
                                        'bg-accent'
                                    )}
                                    onClick={() => {
                                      field.onChange(country.value);
                                      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —è–∑—ã–∫ —Å—Ç—Ä–∞–Ω—ã
                                      const languages = getLanguagesFromCountry(
                                        country.value
                                      );
                                      if (languages.length > 0) {
                                        setValue(
                                          'language',
                                          languages[0].value
                                        );
                                      }
                                      setCountryOpen(false);
                                      setCountrySearch('');
                                    }}
                                  >
                                    <Check
                                      className={cn(
                                        'mr-2 h-4 w-4',
                                        field.value === country.value
                                          ? 'opacity-100'
                                          : 'opacity-0'
                                      )}
                                    />
                                    {country.label}
                                  </div>
                                ))}
                            </CommandGroup>
                          </CommandList>
                        </Command>
                      </PopoverContent>
                    </Popover>
                  );
                }}
              />
              {errors.country && (
                <p className="text-xs text-red-500 mt-1">
                  {errors.country.message}
                </p>
              )}
            </div>

            {/* –í—ã–±–æ—Ä —è–∑—ã–∫–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è */}
            <div className="space-y-2">
              <label className="text-sm font-medium text-gray-700">
                –Ø–∑—ã–∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è <span className="text-red-500">*</span>
              </label>
              <Controller
                name="language"
                control={control}
                render={({ field }) => {
                  const selectedCountry = watch('country');
                  const availableLanguages = useMemo(
                    () =>
                      selectedCountry
                        ? getLanguagesFromCountry(selectedCountry)
                        : [],
                    [selectedCountry, getLanguagesFromCountry]
                  );

                  return (
                    <Select
                      value={field.value}
                      onValueChange={field.onChange}
                      disabled={isSubmitting || !selectedCountry}
                    >
                      <SelectTrigger
                        className={cn(
                          'w-full',
                          errors.language && 'border-red-400'
                        )}
                      >
                        <SelectValue
                          placeholder={
                            selectedCountry
                              ? '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫...'
                              : '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É'
                          }
                        />
                      </SelectTrigger>
                      <SelectContent className="max-h-[200px]">
                        <SelectGroup>
                          {availableLanguages.length > 0 ? (
                            availableLanguages.map(
                              (lang: { value: string; label: string }) => (
                                <SelectItem key={lang.value} value={lang.value}>
                                  {lang.label}
                                </SelectItem>
                              )
                            )
                          ) : (
                            <div className="px-2 py-1.5 text-sm text-gray-500">
                              –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É
                            </div>
                          )}
                        </SelectGroup>
                      </SelectContent>
                    </Select>
                  );
                }}
              />
              {errors.language && (
                <p className="text-xs text-red-500 mt-1">
                  {errors.language.message}
                </p>
              )}
            </div>

            {/* –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã */}
            <div className="space-y-2">
              <label
                className="text-sm font-medium text-gray-700"
                htmlFor="experience"
              >
                –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã <span className="text-red-500">*</span>
              </label>
              <Controller
                name="experience"
                control={control}
                render={({ field }) => (
                  <select
                    {...field}
                    className={cn(
                      'w-full px-3 py-2 border rounded-md focus:ring-2 focus:ring-blue-500',
                      errors.experience ? 'border-red-400' : 'border-gray-300'
                    )}
                    disabled={isSubmitting}
                  >
                    <option value="" disabled>
                      –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
                    </option>
                    {EXPERIENCE_OPTIONS.map((option) => (
                      <option key={option.value} value={option.value}>
                        {option.label}
                      </option>
                    ))}
                  </select>
                )}
              />
              {errors.experience && (
                <p className="text-xs text-red-500">
                  {errors.experience.message}
                </p>
              )}
            </div>

            {/* Email */}
            <div className="space-y-2">
              <label className="text-sm font-medium text-gray-700">Email</label>
              <Controller
                name="email"
                control={control}
                render={({ field }) => (
                  <input
                    {...field}
                    type="email"
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="your@email.com"
                    disabled={isSubmitting}
                  />
                )}
              />
              {errors.email && (
                <p className="text-xs text-red-500">{errors.email.message}</p>
              )}
            </div>

            {/* –¢–µ–ª–µ—Ñ–æ–Ω */}
            <div className="space-y-2">
              <label className="text-sm font-medium text-gray-700">
                –¢–µ–ª–µ—Ñ–æ–Ω
              </label>
              <Controller
                name="phone"
                control={control}
                render={({ field }) => (
                  <input
                    {...field}
                    type="tel"
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="+7 (999) 123-45-67"
                    disabled={isSubmitting}
                  />
                )}
              />
              {errors.phone && (
                <p className="text-xs text-red-500">{errors.phone.message}</p>
              )}
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
            <Button type="submit" className="w-full" disabled={isSubmitting}>
              {isSubmitting ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  –û—Ç–ø—Ä–∞–≤–∫–∞...
                </>
              ) : (
                '–ü—Ä–æ–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ'
              )}
            </Button>
          </form>
        </CardContent>
      </div>
    </div>
  );
});

CollectingContacts.displayName = 'CollectingContacts';

export default CollectingContacts;
