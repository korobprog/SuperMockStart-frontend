import { useState, useEffect } from 'react';
import { useSearchParams } from 'react-router-dom';
import { Button } from '../components/ui/button';
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from '../components/ui/card';
import { Alert, AlertDescription } from '../components/ui/alert';

const TokenCheck = () => {
  const [searchParams] = useSearchParams();
  const [tokens, setTokens] = useState<{
    telegram_token?: string;
    authToken?: string;
    userId?: string;
    telegramUser?: any;
  }>({});
  const [testResult, setTestResult] = useState<any>(null);
  const [loading, setLoading] = useState(false);
  const [autoRefresh, setAutoRefresh] = useState(false);
  const [refreshInterval, setRefreshInterval] = useState<NodeJS.Timeout | null>(
    null
  );

  const API_URL = import.meta.env.VITE_API_URL || 'https://api.supermock.ru/api';

  useEffect(() => {
    console.log('TokenCheck component mounted');

    // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const urlUserId = searchParams.get('userId');

    const telegramToken = localStorage.getItem('telegram_token') || undefined;
    const authToken = localStorage.getItem('authToken') || undefined;
    const userId = localStorage.getItem('userId') || urlUserId || undefined;
    const telegramUserStr = localStorage.getItem('telegramUser');
    const telegramUser = telegramUserStr ? JSON.parse(telegramUserStr) : null;

    setTokens({
      telegram_token: telegramToken,
      authToken,
      userId,
      telegramUser,
    });

    // –ï—Å–ª–∏ –µ—Å—Ç—å userId –≤ URL, –Ω–æ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω
    if (urlUserId && !telegramToken) {
      console.log('–ù–∞–π–¥–µ–Ω userId –≤ URL:', urlUserId);
    }

    // –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      if (refreshInterval) {
        clearInterval(refreshInterval);
      }
    };
  }, [searchParams]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
  const startAutoRefresh = () => {
    if (refreshInterval) {
      clearInterval(refreshInterval);
    }

    const interval = setInterval(async () => {
      await refreshToken();
    }, 30000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

    setRefreshInterval(interval);
    setAutoRefresh(true);
  };

  const stopAutoRefresh = () => {
    if (refreshInterval) {
      clearInterval(refreshInterval);
      setRefreshInterval(null);
    }
    setAutoRefresh(false);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
  const refreshToken = async () => {
    try {
      setLoading(true);
      const currentUserId = searchParams.get('userId') || tokens.userId;

      if (!currentUserId) {
        console.log('–ù–µ—Ç userId –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞');
        return;
      }

      console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è userId:', currentUserId);

      const response = await fetch(`${API_URL}/auth/test-token-user`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ userId: currentUserId }),
      });

      const data = await response.json();
      console.log('üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', data);

      if (data.success) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
        localStorage.setItem('extended_token', data.data.token);
        localStorage.setItem('telegram_token', data.data.token);
        localStorage.setItem('authToken', data.data.token);
        localStorage.setItem('userId', data.data.user.id.toString());
        localStorage.setItem('telegramUser', JSON.stringify(data.data.user));

        setTokens((prev) => ({
          ...prev,
          telegram_token: data.data.token,
          authToken: data.data.token,
          userId: data.data.user.id.toString(),
          telegramUser: data.data.user,
        }));

        console.log('‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', data.error);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
    } finally {
      setLoading(false);
    }
  };

  const getTestToken = async () => {
    try {
      console.log('Getting test token...');
      const response = await fetch(`${API_URL}/auth/test-token`);
      const data = await response.json();

      console.log('Token response:', data);

      if (data.success) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –æ–±–µ–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        localStorage.setItem('telegram_token', data.data.token);
        localStorage.setItem('authToken', data.data.token);
        localStorage.setItem('userId', data.data.user.id.toString());

        setTokens((prev) => ({
          ...prev,
          telegram_token: data.data.token,
          authToken: data.data.token,
          userId: data.data.user.id.toString(),
        }));
        alert('–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω!');
      } else {
        alert('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: ' + data.error);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
      alert('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞');
    }
  };

  const createRealToken = async () => {
    try {
      setLoading(true);
      const urlUserId = searchParams.get('userId');
      if (!urlUserId) {
        alert('–ù–µ—Ç userId –≤ URL!');
        return;
      }

      console.log('Creating real token for userId:', urlUserId);

      const response = await fetch(`${API_URL}/auth/test-token-user`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ userId: urlUserId }),
      });

      console.log('Response status:', response.status);
      const data = await response.json();
      console.log('Real token response:', data);

      if (data.success) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
        localStorage.setItem('extended_token', data.data.token);
        localStorage.setItem('telegram_token', data.data.token);
        localStorage.setItem('authToken', data.data.token);
        localStorage.setItem('userId', data.data.user.id.toString());
        localStorage.setItem('telegramUser', JSON.stringify(data.data.user));

        setTokens((prev) => ({
          ...prev,
          telegram_token: data.data.token,
          authToken: data.data.token,
          userId: data.data.user.id.toString(),
          telegramUser: data.data.user,
        }));
        alert('–†–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω!');
      } else {
        console.error('Token creation failed:', data);
        alert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: ' + data.error);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞:', error);
      alert(
        '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: ' +
          (error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
      );
    } finally {
      setLoading(false);
    }
  };

  const testFormSubmission = async () => {
    try {
      const token =
        localStorage.getItem('telegram_token') ||
        localStorage.getItem('authToken');

      if (!token) {
        alert('–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω!');
        return;
      }

      const formData = {
        profession: 'frontend-developer',
        country: 'RU',
        language: 'ru',
        experience: '0-0',
        email: 'test@example.com',
        phone: '+79001234567',
        linkedin: 'https://linkedin.com/in/test',
        github: 'https://github.com/test',
        portfolio: 'https://portfolio.test',
        about: '–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
        skills: ['JavaScript', 'React', 'TypeScript'],
        education: '–í—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
        englishLevel: 'B2',
        salary: '100000',
        remoteWork: true,
        relocation: false,
        noticePeriod: '2 –Ω–µ–¥–µ–ª–∏',
        additionalInfo: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
      };

              const response = await fetch(`${API_URL}/form`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(formData),
      });

      const result = await response.json();
      setTestResult({ status: response.status, data: result });

      if (response.ok) {
        alert('–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
      } else {
        alert(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã: ${result.error || response.statusText}`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º—ã:', error);
      setTestResult({
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
      });
      alert('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º—ã');
    }
  };

  const clearTokens = () => {
    localStorage.removeItem('telegram_token');
    localStorage.removeItem('authToken');
    localStorage.removeItem('extended_token');
    localStorage.removeItem('userId');
    localStorage.removeItem('telegramUser');
    setTokens({});
    setTestResult(null);
    alert('–¢–æ–∫–µ–Ω—ã –æ—á–∏—â–µ–Ω—ã!');
  };

  const urlUserId = searchParams.get('userId');

  return (
    <div className="container mx-auto p-6 space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {urlUserId && (
            <Alert className="bg-blue-50 border-blue-200">
              <AlertDescription>
                <div className="font-semibold text-blue-800 mb-2">
                  üì± –î–∞–Ω–Ω—ã–µ –æ—Ç Telegram –±–æ—Ç–∞:
                </div>
                <div className="text-sm text-blue-700">
                  <div>
                    <span className="font-medium">Telegram ID:</span>{' '}
                    {urlUserId}
                  </div>
                  <div>
                    <span className="font-medium">–°—Ç–∞—Ç—É—Å:</span>{' '}
                    {tokens.telegram_token
                      ? '‚úÖ –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω'
                      : '‚ùå –¢–æ–∫–µ–Ω –Ω–µ —Å–æ–∑–¥–∞–Ω'}
                  </div>
                </div>
              </AlertDescription>
            </Alert>
          )}

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h3 className="font-semibold mb-2">–¢–æ–∫–µ–Ω—ã –≤ localStorage:</h3>
              <div className="space-y-2 text-sm">
                <div>
                  <span className="font-medium">extended_token:</span>{' '}
                  <span
                    className={
                      localStorage.getItem('extended_token')
                        ? 'text-green-600'
                        : 'text-red-600'
                    }
                  >
                    {localStorage.getItem('extended_token')
                      ? '‚úÖ –ù–∞–π–¥–µ–Ω'
                      : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}
                  </span>
                </div>
                <div>
                  <span className="font-medium">telegram_token:</span>{' '}
                  <span
                    className={
                      tokens.telegram_token ? 'text-green-600' : 'text-red-600'
                    }
                  >
                    {tokens.telegram_token ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}
                  </span>
                </div>
                <div>
                  <span className="font-medium">authToken:</span>{' '}
                  <span
                    className={
                      tokens.authToken ? 'text-green-600' : 'text-red-600'
                    }
                  >
                    {tokens.authToken ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}
                  </span>
                </div>
                <div>
                  <span className="font-medium">userId:</span>{' '}
                  <span
                    className={
                      tokens.userId ? 'text-green-600' : 'text-red-600'
                    }
                  >
                    {tokens.userId ? `‚úÖ ${tokens.userId}` : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}
                  </span>
                </div>
              </div>
            </div>

            {tokens.telegramUser && (
              <div>
                <h3 className="font-semibold mb-2">
                  –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram:
                </h3>
                <div className="space-y-1 text-sm">
                  <div>
                    <span className="font-medium">ID:</span>{' '}
                    {tokens.telegramUser.id}
                  </div>
                  <div>
                    <span className="font-medium">–ò–º—è:</span>{' '}
                    {tokens.telegramUser.firstName}
                  </div>
                  <div>
                    <span className="font-medium">–§–∞–º–∏–ª–∏—è:</span>{' '}
                    {tokens.telegramUser.lastName || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
                  </div>
                  <div>
                    <span className="font-medium">Username:</span>{' '}
                    {tokens.telegramUser.username || '–ù–µ —É–∫–∞–∑–∞–Ω'}
                  </div>
                </div>
              </div>
            )}
          </div>

          <div className="flex flex-wrap gap-2">
            {urlUserId && (
              <Button
                onClick={createRealToken}
                disabled={loading}
                variant="default"
                className="bg-green-600 hover:bg-green-700"
              >
                {loading ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    –°–æ–∑–¥–∞–Ω–∏–µ...
                  </>
                ) : (
                  `üéØ –°–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è ${urlUserId}`
                )}
              </Button>
            )}

            <Button onClick={refreshToken} disabled={loading} variant="outline">
              {loading ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-gray-600 mr-2"></div>
                  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...
                </>
              ) : (
                'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω'
              )}
            </Button>

            <Button
              onClick={autoRefresh ? stopAutoRefresh : startAutoRefresh}
              variant={autoRefresh ? 'destructive' : 'outline'}
            >
              {autoRefresh
                ? '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ'
                : 'üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ'}
            </Button>

            <Button onClick={getTestToken} variant="outline">
              –ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω
            </Button>

            <Button onClick={testFormSubmission} variant="outline">
              –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã
            </Button>

            <Button onClick={clearTokens} variant="destructive">
              –û—á–∏—Å—Ç–∏—Ç—å —Ç–æ–∫–µ–Ω—ã
            </Button>
          </div>

          {autoRefresh && (
            <Alert className="bg-yellow-50 border-yellow-200">
              <AlertDescription>
                üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤–∫–ª—é—á–µ–Ω–æ. –¢–æ–∫–µ–Ω –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è
                –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥.
              </AlertDescription>
            </Alert>
          )}
        </CardContent>
      </Card>

      {testResult && (
        <Card>
          <CardHeader>
            <CardTitle>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</CardTitle>
          </CardHeader>
          <CardContent>
            <pre className="bg-gray-100 p-4 rounded text-sm overflow-auto">
              {JSON.stringify(testResult, null, 2)}
            </pre>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default TokenCheck;
