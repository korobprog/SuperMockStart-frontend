import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { useTelegramAuth } from '@/hooks/useTelegramAuth';

const Home: React.FC = () => {
  const { user, loading, isAuthenticated, logout } = useTelegramAuth();
  const [step, setStep] = useState(1);
  const [authUrl, setAuthUrl] = useState('');
  const [userId] = useState(1736594064); // –†–µ–∞–ª—å–Ω—ã–π User ID

  const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001';

  const createAuthUrl = async () => {
    console.log('üîó Creating auth URL for user:', userId);

    try {
      const response = await fetch(`${API_URL}/api/telegram-bot/auth-url`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId,
          redirectUrl: `${window.location.origin}/auth-callback`,
        }),
      });

      const data = await response.json();
      console.log('üì° API Response:', data);

      if (data.success) {
        console.log('‚úÖ Auth URL created successfully:', data.data?.authUrl);
        setAuthUrl(data.data?.authUrl || '');
        setStep(2);
      } else {
        console.error('‚ùå API Error:', data.error);
        alert(`–û—à–∏–±–∫–∞: ${data.error}`);
      }
    } catch (error) {
      console.error('‚ùå Network Error:', error);
      alert(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error}`);
    }
  };

  const checkAuth = async () => {
    console.log('üîç Checking auth for user:', userId);

    try {
      const response = await fetch(`${API_URL}/api/telegram-bot/verify-user`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId,
        }),
      });

      const data = await response.json();
      console.log('üì° Verify API Response:', data);

      if (data.success) {
        console.log('‚úÖ Auth verification successful');

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ localStorage
        if (data.data?.token) {
          localStorage.setItem('telegram_token', data.data.token);
          console.log('üíæ Token saved to localStorage');
        }

        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        window.location.reload();
      } else {
        console.error('‚ùå Auth verification failed:', data.error);
        alert(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
    } catch (error) {
      console.error('‚ùå Network Error during auth check:', error);
      alert(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error}`);
    }
  };

  const openTelegram = () => {
    console.log('üîó Opening Telegram URL:', authUrl);

    if (authUrl) {
      try {
        // –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
        const newWindow = window.open(authUrl, '_blank');

        if (newWindow) {
          console.log('‚úÖ Telegram window opened successfully');
          setStep(3);
        } else {
          console.log('‚ùå Failed to open window, trying alternative method');
          // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
          navigator.clipboard
            .writeText(authUrl)
            .then(() => {
              alert(
                '–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞! –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É.'
              );
              setStep(3);
            })
            .catch(() => {
              alert(
                `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å Telegram –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –≤ Telegram:\n\n${authUrl}`
              );
              setStep(3);
            });
        }
      } catch (error) {
        console.error('‚ùå Error opening Telegram:', error);
        alert(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ Telegram: ${error}\n\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –≤ Telegram:\n\n${authUrl}`
        );
        setStep(3);
      }
    } else {
      console.error('‚ùå No auth URL available');
      alert(
        '–û—à–∏–±–∫–∞: —Å—Å—ã–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –∑–∞–Ω–æ–≤–æ.'
      );
    }
  };

  const handleLogout = () => {
    logout();
    setStep(1);
    setAuthUrl('');
    console.log('üö™ User logged out');
  };

  if (loading) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="flex justify-center items-center min-h-[400px]">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
        </div>
      </div>
    );
  }

  if (isAuthenticated && user) {
    return (
      <div className="container mx-auto px-4 py-8">
        <Card className="max-w-4xl mx-auto">
          <CardHeader className="text-center">
            <CardTitle className="text-3xl font-bold text-green-600">
              –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
            </CardTitle>
            <CardDescription className="text-lg">
              –ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è - –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –º–æ–∫–æ–≤—ã—Ö —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π —Å
              –∫–æ–ª–ª–µ–≥–∞–º–∏.
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ */}
            <div className="bg-green-50 border border-green-200 rounded-lg p-4">
              <h3 className="text-lg font-semibold mb-2">
                –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <p>
                    <strong>ID:</strong> {user.id}
                  </p>
                  <p>
                    <strong>–ò–º—è:</strong> {user.first_name}
                  </p>
                </div>
                <div>
                  <p>
                    <strong>–°—Ç–∞—Ç—É—Å:</strong>{' '}
                    <span className="text-green-600">–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω</span>
                  </p>
                  <p>
                    <strong>–¢–æ–∫–µ–Ω:</strong>{' '}
                    <span className="text-xs text-gray-500">–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω</span>
                  </p>
                </div>
              </div>
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <Button
                onClick={() => (window.location.href = '/collectingcontacts')}
                className="w-full h-12 text-lg"
              >
                –ü–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è
              </Button>
              <Button
                onClick={() => (window.location.href = '/about')}
                variant="outline"
                className="w-full h-12 text-lg"
              >
                –û –ø—Ä–æ–µ–∫—Ç–µ
              </Button>
            </div>

            {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
            <div className="flex justify-center space-x-4">
              <Button
                onClick={() => (window.location.href = '/auth-demo')}
                variant="outline"
                size="sm"
              >
                –î–µ–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
              </Button>
              <Button
                onClick={handleLogout}
                variant="outline"
                size="sm"
                className="text-red-600 hover:text-red-700"
              >
                –í—ã–π—Ç–∏
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  // –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  return (
    <div className="container mx-auto px-4 py-8">
      <Card className="max-w-2xl mx-auto">
        <CardHeader className="text-center">
          <CardTitle className="text-3xl font-bold">SuperMockStart</CardTitle>
          <CardDescription className="text-lg">
            –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–æ–∫–æ–≤—ã—Ö —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π —Å –∫–æ–ª–ª–µ–≥–∞–º–∏
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          {step === 1 && (
            <div className="text-center">
              <h3 className="text-lg font-semibold mb-4">
                –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
              </h3>
              <p className="text-gray-600 mb-4">
                –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è
                –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞.
              </p>
              <Button onClick={createAuthUrl} className="w-full">
                –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
              </Button>
            </div>
          )}

          {step === 2 && (
            <div className="text-center">
              <h3 className="text-lg font-semibold mb-4">
                –®–∞–≥ 2: –û—Ç–∫—Ä—ã—Ç–∏–µ –≤ Telegram
              </h3>
              <p className="text-gray-600 mb-4">
                –°—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! –¢–µ–ø–µ—Ä—å –æ—Ç–∫—Ä–æ–π—Ç–µ –µ—ë –≤ Telegram –∏ –Ω–∞–∂–º–∏—Ç–µ "Start".
              </p>
              <div className="bg-gray-100 p-4 rounded-lg mb-4">
                <p className="text-sm text-gray-700 break-all">{authUrl}</p>
              </div>
              <div className="space-y-2">
                <Button onClick={openTelegram} className="w-full">
                  –û—Ç–∫—Ä—ã—Ç—å –≤ Telegram
                </Button>
                <Button
                  variant="outline"
                  onClick={() => setStep(1)}
                  className="w-full"
                >
                  –ù–∞–∑–∞–¥
                </Button>
              </div>
            </div>
          )}

          {step === 3 && (
            <div className="text-center">
              <h3 className="text-lg font-semibold mb-4">
                –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
              </h3>
              <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-4">
                <div className="flex items-center justify-center">
                  <svg
                    className="animate-spin -ml-1 mr-3 h-5 w-5 text-yellow-600"
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                  >
                    <circle
                      className="opacity-25"
                      cx="12"
                      cy="12"
                      r="10"
                      stroke="currentColor"
                      strokeWidth="4"
                    ></circle>
                    <path
                      className="opacity-75"
                      fill="currentColor"
                      d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                    ></path>
                  </svg>
                  <span className="text-yellow-800">
                    –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ Telegram...
                  </span>
                </div>
              </div>
              <div className="space-y-2">
                <Button onClick={checkAuth} className="w-full">
                  –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                </Button>
                <Button
                  variant="outline"
                  onClick={() => setStep(2)}
                  className="w-full"
                >
                  –ù–∞–∑–∞–¥
                </Button>
              </div>
            </div>
          )}

          <div className="text-xs text-gray-500 text-center">
            <p>API URL: {API_URL}</p>
            <p>User ID: {userId}</p>
            <p>Step: {step}/3</p>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default Home;
