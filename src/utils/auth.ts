// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–ª—é—á–µ–π localStorage
export const AUTH_TOKEN_KEY = 'authToken';
export const TELEGRAM_TOKEN_KEY = 'telegram_token';
export const EXTENDED_TOKEN_KEY = 'extended_token';
export const USER_KEY = 'user';
export const USER_ID_KEY = 'userId';

/**
 * –û—á–∏—â–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
 */
export const cleanupInvalidData = (): void => {
  try {
    const keys = [AUTH_TOKEN_KEY, TELEGRAM_TOKEN_KEY, USER_KEY, USER_ID_KEY];
    keys.forEach((key) => {
      const value = localStorage.getItem(key);
      if (value === 'undefined' || value === 'null') {
        localStorage.removeItem(key);
        console.log(`–û—á–∏—â–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª—é—á: ${key}`);
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
  }
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ localStorage —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º extended_token
 */
export const getStoredToken = (): string | null => {
  try {
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: extended_token > telegram_token > authToken > token
    const tokens = [
      { key: EXTENDED_TOKEN_KEY, name: 'extended_token' },
      { key: TELEGRAM_TOKEN_KEY, name: 'telegram_token' },
      { key: AUTH_TOKEN_KEY, name: 'authToken' },
      { key: 'token', name: 'token' },
    ];

    for (const { key, name } of tokens) {
      const token = localStorage.getItem(key);
      if (
        token &&
        token !== 'undefined' &&
        token !== 'null' &&
        token.trim() !== ''
      ) {
        console.log(`‚úÖ Found valid ${name}:`, token.substring(0, 20) + '...');
        return token;
      }
    }

    console.log('‚ùå No valid token found in localStorage');
    return null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ –∏–∑ localStorage:', error);
    return null;
  }
};

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω –≤ localStorage –≤–æ –≤—Å–µ –∫–ª—é—á–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 */
export const setStoredToken = (token: string): void => {
  try {
    console.log(
      'üîç setStoredToken called with token:',
      token.substring(0, 20) + '...'
    );
    console.log('üîç token length:', token.length);
    console.log('üîç token format check:', {
      isJWT: token.split('.').length === 3,
      parts: token.split('.').length,
    });

    if (
      token &&
      token !== 'undefined' &&
      token !== 'null' &&
      token.trim() !== ''
    ) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Å–µ –∫–ª—é—á–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      localStorage.setItem(EXTENDED_TOKEN_KEY, token);
      localStorage.setItem(TELEGRAM_TOKEN_KEY, token);
      localStorage.setItem(AUTH_TOKEN_KEY, token);
      localStorage.setItem('token', token);
      console.log('‚úÖ Token saved to all localStorage keys');
    } else {
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, —É–¥–∞–ª—è–µ–º –∏–∑ localStorage
      removeStoredToken();
      console.log('‚ùå Invalid token, removed from localStorage');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ –≤ localStorage:', error);
    removeStoredToken();
  }
};

/**
 * –£–¥–∞–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ localStorage
 */
export const removeStoredToken = (): void => {
  localStorage.removeItem(EXTENDED_TOKEN_KEY);
  localStorage.removeItem(TELEGRAM_TOKEN_KEY);
  localStorage.removeItem(AUTH_TOKEN_KEY);
  localStorage.removeItem('token');
  localStorage.removeItem(USER_KEY);
  localStorage.removeItem(USER_ID_KEY);
  console.log('‚úÖ All tokens removed from localStorage');
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
 */
export const isValidToken = (token: string): boolean => {
  if (
    !token ||
    token === 'undefined' ||
    token === 'null' ||
    token.trim() === ''
  ) {
    return false;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç JWT —Ç–æ–∫–µ–Ω–∞
  const parts = token.split('.');
  if (parts.length !== 3) {
    return false;
  }

  return true;
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
 */
export const getStoredUser = (): any => {
  try {
    const userStr = localStorage.getItem(USER_KEY);
    if (userStr) {
      return JSON.parse(userStr);
    }
    return null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage:', error);
    return null;
  }
};

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage
 */
export const setStoredUser = (user: any): void => {
  try {
    if (user && typeof user === 'object') {
      localStorage.setItem(USER_KEY, JSON.stringify(user));
      if (user.id) {
        localStorage.setItem(USER_ID_KEY, user.id.toString());
      }
      console.log('‚úÖ User saved to localStorage');
    } else {
      localStorage.removeItem(USER_KEY);
      localStorage.removeItem(USER_ID_KEY);
      console.log('‚ùå Invalid user, removed from localStorage');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage:', error);
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω
 */
export const hasValidToken = (): boolean => {
  return !!getStoredToken();
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
 */
export const getAuthHeaders = (): Record<string, string> => {
  console.warn('getAuthHeaders is deprecated. Using cookie-based auth; include credentials in fetch instead.');
  return {};
};

/**
 * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
export const clearAuthData = (): void => {
  removeStoredToken();
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
 */
export const isTokenExpired = (token: string): boolean => {
  try {
    const payload = JSON.parse(atob(token.split('.')[1]));
    const exp = payload.exp * 1000; // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
    return Date.now() >= exp;
  } catch {
    return true; // –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å, —Å—á–∏—Ç–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–º
  }
};

// Debounce —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
let testTokenRequestPromise: Promise<any> | null = null;

export const debouncedGetTestToken = async (
  getTestTokenFn: () => Promise<any>
) => {
  // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
  if (testTokenRequestPromise) {
    return testTokenRequestPromise;
  }

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
  testTokenRequestPromise = getTestTokenFn().finally(() => {
    // –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
    testTokenRequestPromise = null;
  });

  return testTokenRequestPromise;
};
