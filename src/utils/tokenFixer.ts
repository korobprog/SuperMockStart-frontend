import {
  getStoredToken,
  setStoredToken,
  removeStoredToken,
  setStoredUser,
} from './auth';

interface TokenFixResult {
  fixed: boolean;
  reason?: string;
  needsRecreation?: boolean;
  newToken?: string;
}

/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–æ–∫–µ–Ω–æ–º
 */
export const diagnoseAndFixToken = async (): Promise<TokenFixResult> => {
  try {
    console.log('üîç Starting token diagnosis and fix...');

    const token = getStoredToken();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if (!token) {
      console.log('‚ùå No token found');
      return {
        fixed: false,
        reason: 'No token found in localStorage',
        needsRecreation: true,
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç JWT
    const tokenParts = token.split('.');
    if (tokenParts.length !== 3) {
      console.log('‚ùå Invalid JWT format');
      removeStoredToken();
      return {
        fixed: false,
        reason: 'Invalid JWT format',
        needsRecreation: true,
      };
    }

    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    let payload;
    try {
      payload = JSON.parse(atob(tokenParts[1]));
      console.log('‚úÖ Token decoded successfully');
    } catch (error) {
      console.log('‚ùå Failed to decode token');
      removeStoredToken();
      return {
        fixed: false,
        reason: 'Failed to decode token',
        needsRecreation: true,
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
    const currentTime = Math.floor(Date.now() / 1000);
    if (payload.exp && payload.exp < currentTime) {
      console.log('‚ùå Token expired');
      removeStoredToken();
      return {
        fixed: false,
        reason: 'Token expired',
        needsRecreation: true,
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ userDbId
    if (!payload.userDbId) {
      console.log('‚ùå Token missing userDbId');
      removeStoredToken();
      return {
        fixed: false,
        reason: 'Token missing userDbId',
        needsRecreation: true,
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    try {
      const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001';
      const response = await fetch(
        `${API_URL}/api/auth/verify-extended-token`,
        {
          method: 'POST',
          headers: {
            Authorization: `Bearer ${token}`,
            'Content-Type': 'application/json',
          },
        }
      );

      const data = await response.json();

      if (response.ok && data.success) {
        console.log('‚úÖ Token verified on server');
        return {
          fixed: true,
          reason: 'Token is valid and working',
        };
      } else {
        console.log('‚ùå Token verification failed on server:', data.error);

        // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –Ω–æ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç,
        // –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –ë–î
        if (data.error && data.error.includes('User not found')) {
          return {
            fixed: false,
            reason: 'User not found in database',
            needsRecreation: true,
          };
        }

        return {
          fixed: false,
          reason: `Server verification failed: ${data.error}`,
          needsRecreation: true,
        };
      }
    } catch (error) {
      console.log('‚ùå Server verification error:', error);
      return {
        fixed: false,
        reason: 'Server verification error',
        needsRecreation: true,
      };
    }
  } catch (error) {
    console.error('‚ùå Token diagnosis error:', error);
    return {
      fixed: false,
      reason: error instanceof Error ? error.message : 'Unknown error',
      needsRecreation: true,
    };
  }
};

/**
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ—Ç –≤—Å–µ —Ç–æ–∫–µ–Ω—ã
 */
export const forceClearAllTokens = (): void => {
  console.log('üßπ Clearing all tokens...');

  // –û—á–∏—â–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª—é—á–∏ —Ç–æ–∫–µ–Ω–æ–≤
  const tokenKeys = [
    'extended_token',
    'telegram_token',
    'authToken',
    'token',
    'user_token',
  ];
  const userKeys = ['user', 'userData', 'authUser', 'telegramUser'];

  tokenKeys.forEach((key) => {
    localStorage.removeItem(key);
    console.log(`üóëÔ∏è Removed ${key}`);
  });

  userKeys.forEach((key) => {
    localStorage.removeItem(key);
    console.log(`üóëÔ∏è Removed ${key}`);
  });

  console.log('‚úÖ All tokens cleared');
};

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
 */
export const createTestToken = async (): Promise<TokenFixResult> => {
  try {
    console.log('üîß Creating test token...');

    const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001';
    const response = await fetch(`${API_URL}/api/auth/test-token`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    });

    const data = await response.json();

    if (response.ok && data.success) {
      console.log('‚úÖ Test token created');
      setStoredToken(data.data.token);
      setStoredUser(data.data.user);

      return {
        fixed: true,
        reason: 'Test token created successfully',
        newToken: data.data.token,
      };
    } else {
      console.log('‚ùå Failed to create test token:', data.error);
      return {
        fixed: false,
        reason: `Failed to create test token: ${data.error}`,
      };
    }
  } catch (error) {
    console.error('‚ùå Test token creation error:', error);
    return {
      fixed: false,
      reason: error instanceof Error ? error.message : 'Unknown error',
    };
  }
};
