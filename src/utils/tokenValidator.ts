import { getStoredToken } from './auth';

interface TokenValidationResult {
  isValid: boolean;
  error?: string;
  user?: any;
  token?: string;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
 */
export const validateTokenOnServer =
  async (): Promise<TokenValidationResult> => {
    try {
      const token = getStoredToken();

      if (!token) {
        return {
          isValid: false,
          error: 'No token found in localStorage',
        };
      }

      const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001';

      console.log('üîç Testing token validation on server...');
      console.log('üîç API URL:', API_URL);
      console.log('üîç Token length:', token.length);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ API
      const response = await fetch(`${API_URL}/api/auth/verify`, {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      console.log('üîç Server response status:', response.status);
      console.log(
        'üîç Server response headers:',
        Object.fromEntries(response.headers.entries())
      );

      const data = await response.json();
      console.log('üîç Server response data:', data);

      if (response.ok && data.success) {
        return {
          isValid: true,
          user: data.data?.user,
          token: token,
        };
      } else {
        return {
          isValid: false,
          error:
            data.error || `HTTP ${response.status}: ${response.statusText}`,
          token: token,
        };
      }
    } catch (error) {
      console.error('‚ùå Token validation error:', error);
      return {
        isValid: false,
        error: error instanceof Error ? error.message : 'Network error',
      };
    }
  };

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ API —Ñ–æ—Ä–º—ã
 */
export const validateFormApiAccess =
  async (): Promise<TokenValidationResult> => {
    try {
      const token = getStoredToken();

      if (!token) {
        return {
          isValid: false,
          error: 'No token found in localStorage',
        };
      }

      const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001';

      console.log('üîç Testing form API access...');
      console.log('üîç API URL:', API_URL);
      console.log('üîç Token length:', token.length);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ API —Ñ–æ—Ä–º—ã
      const response = await fetch(`${API_URL}/api/form`, {
        method: 'GET',
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      console.log('üîç Form API response status:', response.status);
      console.log(
        'üîç Form API response headers:',
        Object.fromEntries(response.headers.entries())
      );

      const data = await response.json();
      console.log('üîç Form API response data:', data);

      if (response.ok) {
        return {
          isValid: true,
          user: data.data,
          token: token,
        };
      } else {
        return {
          isValid: false,
          error:
            data.error || `HTTP ${response.status}: ${response.statusText}`,
          token: token,
        };
      }
    } catch (error) {
      console.error('‚ùå Form API access error:', error);
      return {
        isValid: false,
        error: error instanceof Error ? error.message : 'Network error',
      };
    }
  };

/**
 * –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–∞
 */
export const diagnoseToken = async (): Promise<{
  tokenExists: boolean;
  tokenValid: boolean;
  serverValid: boolean;
  formApiAccess: boolean;
  errors: string[];
}> => {
  const result = {
    tokenExists: false,
    tokenValid: false,
    serverValid: false,
    formApiAccess: false,
    errors: [] as string[],
  };

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    const token = getStoredToken();
    result.tokenExists = !!token;

    if (!token) {
      result.errors.push('–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage');
      return result;
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞
    const tokenParts = token.split('.');
    result.tokenValid = tokenParts.length === 3;

    if (!result.tokenValid) {
      result.errors.push('–¢–æ–∫–µ–Ω –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JWT');
      return result;
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    const serverValidation = await validateTokenOnServer();
    result.serverValid = serverValidation.isValid;

    if (!result.serverValid) {
      result.errors.push(
        `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${serverValidation.error}`
      );
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ API —Ñ–æ—Ä–º—ã
    const formValidation = await validateFormApiAccess();
    result.formApiAccess = formValidation.isValid;

    if (!result.formApiAccess) {
      result.errors.push(`–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ API —Ñ–æ—Ä–º—ã: ${formValidation.error}`);
    }

    return result;
  } catch (error) {
    result.errors.push(
      `–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${
        error instanceof Error ? error.message : 'Unknown error'
      }`
    );
    return result;
  }
};
