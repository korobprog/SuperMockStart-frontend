// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
const API_URL = 'http://localhost:3001';

// –¢–µ—Å—Ç–æ–≤—ã–π extended_token (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
const TEST_EXTENDED_TOKEN =
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEyMzQ1Njc4OSwidXNlcm5hbWUiOiJ0ZXN0X3VzZXIiLCJmaXJzdE5hbWUiOiJUZXN0IiwibGFzdE5hbWUiOiJVc2VyIiwiYXV0aFR5cGUiOiJ0ZWxlZ3JhbSIsInVzZXJEYklkIjoxLCJpYXQiOjE3NTQyODY5ODAsImV4cCI6MTc1NDg5MTc4MH0.example';

async function testCalendarEndpoints() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...');

  try {
    // –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
    console.log('\n1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET /api/calendar/slots/frontend-developer');
    const slotsResponse = await fetch(
      `${API_URL}/api/calendar/slots/frontend-developer`,
      {
        headers: {
          Authorization: `Bearer ${TEST_EXTENDED_TOKEN}`,
          'Content-Type': 'application/json',
        },
      }
    );

    console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', slotsResponse.status);
    if (slotsResponse.ok) {
      const slotsData = await slotsResponse.json();
      console.log(
        '‚úÖ –°–ª–æ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ:',
        slotsData.data?.length || 0,
        '—Å–ª–æ—Ç–æ–≤'
      );
    } else {
      const errorData = await slotsResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤:', errorData);
    }

    // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—á–µ—Ä–µ–¥–∏
    console.log('\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET /api/calendar/queue/status');
    const queueResponse = await fetch(`${API_URL}/api/calendar/queue/status`, {
      headers: {
        Authorization: `Bearer ${TEST_EXTENDED_TOKEN}`,
        'Content-Type': 'application/json',
      },
    });

    console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', queueResponse.status);
    if (queueResponse.ok) {
      const queueData = await queueResponse.json();
      console.log('‚úÖ –°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏ –ø–æ–ª—É—á–µ–Ω:', queueData.data);
    } else {
      const errorData = await queueResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—á–µ—Ä–µ–¥–∏:', errorData);
    }

    // –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET /api/calendar/sessions');
    const sessionsResponse = await fetch(`${API_URL}/api/calendar/sessions`, {
      headers: {
        Authorization: `Bearer ${TEST_EXTENDED_TOKEN}`,
        'Content-Type': 'application/json',
      },
    });

    console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', sessionsResponse.status);
    if (sessionsResponse.ok) {
      const sessionsData = await sessionsResponse.json();
      console.log(
        '‚úÖ –°–µ—Å—Å–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ:',
        sessionsData.data?.length || 0,
        '—Å–µ—Å—Å–∏–π'
      );
    } else {
      const errorData = await sessionsResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π:', errorData);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

async function testFeedbackEndpoints() {
  console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏...');

  try {
    // –¢–µ—Å—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET /api/feedback/user?type=received');
    const feedbackResponse = await fetch(
      `${API_URL}/api/feedback/user?type=received`,
      {
        headers: {
          Authorization: `Bearer ${TEST_EXTENDED_TOKEN}`,
          'Content-Type': 'application/json',
        },
      }
    );

    console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', feedbackResponse.status);
    if (feedbackResponse.ok) {
      const feedbackData = await feedbackResponse.json();
      console.log(
        '‚úÖ –û—Ç–∑—ã–≤—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ:',
        feedbackData.data?.length || 0,
        '–æ—Ç–∑—ã–≤–æ–≤'
      );
    } else {
      const errorData = await feedbackResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤:', errorData);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
async function runTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤...\n');

  await testCalendarEndpoints();
  await testFeedbackEndpoints();

  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('\nüìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  console.log('1. –ó–∞–º–µ–Ω–∏—Ç–µ TEST_EXTENDED_TOKEN –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç: node test-token-fix.js');
  console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã');
}

runTests();
