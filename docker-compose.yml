version: '3.8'

services:
  # Фронтенд
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    expose:
      - 80
    networks:
      - dokploy-network
    depends_on:
      - backend
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.frontend.rule=Host(`your-domain.com`)'
      - 'traefik.http.routers.frontend.entrypoints=websecure'
      - 'traefik.http.routers.frontend.tls.certResolver=letsencrypt'
      - 'traefik.http.services.frontend.loadbalancer.server.port=80'

  # Бэкенд
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    expose:
      - 3001
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://postgres:password@database:5432/supermock
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=7d
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
      - BOT_USERNAME=${BOT_USERNAME}
      - FRONTEND_URL=https://your-domain.com
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
    networks:
      - dokploy-network
    depends_on:
      - database
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.backend.rule=Host(`api.your-domain.com`)'
      - 'traefik.http.routers.backend.entrypoints=websecure'
      - 'traefik.http.routers.backend.tls.certResolver=letsencrypt'
      - 'traefik.http.services.backend.loadbalancer.server.port=3001'
    volumes:
      - '../files/backend-logs:/app/logs'

  # База данных PostgreSQL
  database:
    image: postgres:16-alpine
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: supermock
    networks:
      - dokploy-network
    volumes:
      - '../files/postgres-data:/var/lib/postgresql/data'
    expose:
      - 5432

networks:
  dokploy-network:
    external: true
