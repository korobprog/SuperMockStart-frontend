version: '3.8'

services:
  supermock-app:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - '3000:80'
      - '8443:443'
    environment:
      - VITE_API_URL=${FRONTEND_URL}
      - VITE_TELEGRAM_TOKEN=${VITE_TELEGRAM_TOKEN}
      - DOMAIN=${DOMAIN:-supermock.ru}
    depends_on:
      - supermock-backend
    restart: unless-stopped
    networks:
      - supermock-network
    labels:
      - 'coolify.managed=true'
      - 'coolify.type=application'
      - 'coolify.domain=${DOMAIN:-supermock.ru}'
      - 'coolify.ssl=true'
      - 'coolify.ssl.provider=letsencrypt'
      - 'coolify.ssl.email=${SSL_EMAIL}'
      - 'coolify.redirects.www=true'

  supermock-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.backend
    ports:
      - '3001:3001'
    environment:
      - NODE_ENV=production
      - PORT=3001
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
      - BOT_USERNAME=SuperMock_bot
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=7d
      - FRONTEND_URL=http://supermock-app:80
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      - supermock-postgres
    restart: unless-stopped
    networks:
      - supermock-network
    labels:
      - 'coolify.managed=true'
      - 'coolify.type=application'

  supermock-postgres:
    image: postgres:15-alpine
    container_name: supermock-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - supermock-network
    labels:
      - 'coolify.managed=true'
      - 'coolify.type=database'

volumes:
  postgres_data:
    driver: local

networks:
  supermock-network:
    driver: bridge
