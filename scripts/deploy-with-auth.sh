#!/bin/bash

# üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ SuperMock –≤ Dokploy —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: DOKPLOY_TOKEN=your_token ./scripts/deploy-with-auth.sh

set -e

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DOKPLOY_URL="${DOKPLOY_URL:-http://217.198.6.238:3000}"
PROJECT_NAME="SuperMock"
PROJECT_DESCRIPTION="–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m'

log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
    exit 1
}

warn() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if [ -z "$DOKPLOY_TOKEN" ]; then
    error "DOKPLOY_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: DOKPLOY_TOKEN=your_token $0"
fi

log "üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ SuperMock –≤ Dokploy"
log "URL: $DOKPLOY_URL"

# 1. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
log "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞..."

PROJECT_RESPONSE=$(curl -s -X POST "$DOKPLOY_URL/api/trpc/project.create" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $DOKPLOY_TOKEN" \
    -d "{\"json\":{\"name\":\"$PROJECT_NAME\",\"description\":\"$PROJECT_DESCRIPTION\"}}")

if echo "$PROJECT_RESPONSE" | grep -q "error"; then
    error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: $PROJECT_RESPONSE"
fi

PROJECT_ID=$(echo "$PROJECT_RESPONSE" | jq -r '.result.data.json.projectId // .result.data.json.id' 2>/dev/null)

if [ "$PROJECT_ID" = "null" ] || [ -z "$PROJECT_ID" ]; then
    error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞: $PROJECT_RESPONSE"
fi

success "–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: $PROJECT_ID"

# –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞
mkdir -p .dokploy
echo "$PROJECT_ID" > .dokploy/project-id

# 2. –°–æ–∑–¥–∞–Ω–∏–µ Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
log "üê≥ –°–æ–∑–¥–∞–Ω–∏–µ Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."

COMPOSE_RESPONSE=$(curl -s -X POST "$DOKPLOY_URL/api/trpc/compose.create" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $DOKPLOY_TOKEN" \
    -d "{\"json\":{
        \"name\":\"supermock-compose\",
        \"projectId\":\"$PROJECT_ID\",
        \"sourceType\":\"git\",
        \"repository\":\"https://github.com/korobprog/SuperMockStart.git\",
        \"branch\":\"main\",
        \"composePath\":\"frontend/docker-compose.yml\"
    }}")

if echo "$COMPOSE_RESPONSE" | grep -q "error"; then
    error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Compose: $COMPOSE_RESPONSE"
fi

COMPOSE_ID=$(echo "$COMPOSE_RESPONSE" | jq -r '.result.data.json.composeId // .result.data.json.id' 2>/dev/null)

if [ "$COMPOSE_ID" = "null" ] || [ -z "$COMPOSE_ID" ]; then
    error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID Compose –∏–∑ –æ—Ç–≤–µ—Ç–∞: $COMPOSE_RESPONSE"
fi

success "Docker Compose —Å–æ–∑–¥–∞–Ω —Å ID: $COMPOSE_ID"

# –°–æ—Ö—Ä–∞–Ω—è–µ–º ID compose
echo "$COMPOSE_ID" > .dokploy/compose-id

# 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
log "üåç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."

# –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
ENV_CONTENT=""
if [ -f "env.dokploy" ]; then
    while IFS= read -r line; do
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if [[ ! $line =~ ^[[:space:]]*# ]] && [[ -n "${line// }" ]]; then
            ENV_CONTENT+="$line\n"
        fi
    done < env.dokploy
else
    warn "–§–∞–π–ª env.dokploy –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"
    ENV_CONTENT="NODE_ENV=production\nPORT=3001\nDATABASE_URL=postgresql://postgres:password@database:5432/supermock\n"
fi

ENV_RESPONSE=$(curl -s -X POST "$DOKPLOY_URL/api/trpc/compose.saveEnvironment" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $DOKPLOY_TOKEN" \
    -d "{\"json\":{\"composeId\":\"$COMPOSE_ID\",\"env\":\"$ENV_CONTENT\"}}")

if echo "$ENV_RESPONSE" | grep -q "error"; then
    warn "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: $ENV_RESPONSE"
else
    success "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
fi

# 4. –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
log "üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è..."

DEPLOY_RESPONSE=$(curl -s -X POST "$DOKPLOY_URL/api/trpc/compose.deploy" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $DOKPLOY_TOKEN" \
    -d "{\"json\":{\"composeId\":\"$COMPOSE_ID\"}}")

if echo "$DEPLOY_RESPONSE" | grep -q "error"; then
    error "–û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: $DEPLOY_RESPONSE"
fi

success "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ"

# 5. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
log "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç)..."

for i in {1..30}; do
    sleep 10
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ ($i/30)..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ API health
    if curl -s --connect-timeout 5 "https://api.supermock.ru/api/health" | grep -q "ok"; then
        success "‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç!"
        break
    elif [ $i -eq 30 ]; then
        warn "‚ö†Ô∏è  API –µ—â–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å—Å—è"
    fi
done

# 6. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
log "üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è..."

echo ""
success "üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ SuperMock –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo ""
log "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏:"
echo "   ‚Ä¢ Project ID: $PROJECT_ID"
echo "   ‚Ä¢ Compose ID: $COMPOSE_ID"
echo "   ‚Ä¢ Frontend: https://supermock.ru"
echo "   ‚Ä¢ Backend API: https://api.supermock.ru/api/health"
echo "   ‚Ä¢ Dokploy Dashboard: $DOKPLOY_URL"
echo ""

log "üîó –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "   # –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤:"
echo "   curl -X GET '$DOKPLOY_URL/api/trpc/compose.logs' -H 'Authorization: Bearer \$DOKPLOY_TOKEN' -G -d 'composeId=$COMPOSE_ID'"
echo ""
echo "   # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:"
echo "   curl -X POST '$DOKPLOY_URL/api/trpc/compose.saveEnvironment' -H 'Authorization: Bearer \$DOKPLOY_TOKEN' -d '{\"json\":{\"composeId\":\"$COMPOSE_ID\",\"env\":\"NEW_VAR=value\"}}'"
echo ""

# –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
cat > .dokploy/deployment-report.md << EOF
# SuperMock Deployment Report

**–î–∞—Ç–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è**: $(date)
**Project ID**: $PROJECT_ID
**Compose ID**: $COMPOSE_ID

## URLs
- Frontend: https://supermock.ru
- Backend API: https://api.supermock.ru/api/health
- Dokploy Dashboard: $DOKPLOY_URL

## –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
- –î–æ–∫–ø–ª–æ–π Dashboard: $DOKPLOY_URL
- Project: $DOKPLOY_URL/dashboard/project/$PROJECT_ID
- Compose: $DOKPLOY_URL/dashboard/project/$PROJECT_ID/services/compose/$COMPOSE_ID

## API Commands
\`\`\`bash
# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞
curl -X GET '$DOKPLOY_URL/api/trpc/compose.one' \\
  -H 'Authorization: Bearer \$DOKPLOY_TOKEN' \\
  -G -d 'composeId=$COMPOSE_ID'

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫
curl -X POST '$DOKPLOY_URL/api/trpc/compose.redeploy' \\
  -H 'Authorization: Bearer \$DOKPLOY_TOKEN' \\
  -d '{"json":{"composeId":"$COMPOSE_ID"}}'
\`\`\`
EOF

success "–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ .dokploy/deployment-report.md"

echo ""
warn "üîß –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É: https://api.supermock.ru/api/health"
echo "   2. –û–±–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"
echo "   3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–æ–º–µ–Ω—ã –≤ Dokploy Dashboard"
echo "   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"
echo ""