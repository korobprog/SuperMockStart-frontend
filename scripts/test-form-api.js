#!/usr/bin/env node

// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API —Ñ–æ—Ä–º—ã
const fetch = require('node-fetch');

const API_BASE = process.env.VITE_API_URL
  ? `${process.env.VITE_API_URL}/api`
  : 'http://localhost:3001/api';

async function testFormAPI() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Ñ–æ—Ä–º—ã...\n');

  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint...');
    const healthResponse = await fetch(`${API_BASE}/health`);
    const healthData = await healthResponse.json();
    console.log('‚úÖ Health:', healthData);
    console.log('');

    // –¢–µ—Å—Ç 2: –¢–µ—Å—Ç PUT /form (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã)
    console.log('2Ô∏è‚É£ –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã...');
    const formData = {
      profession: 'frontend-developer',
      country: 'Russia',
      language: 'ru',
      experience: '1-3 years',
      email: 'test@example.com',
      phone: '+7 999 123-45-67',
    };

    const formResponse = await fetch(`${API_BASE}/form`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        Authorization: 'Bearer test-token', // –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω
      },
      body: JSON.stringify(formData),
    });

    const formResult = await formResponse.json();
    console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', formResponse.status);
    console.log('üìÑ –û—Ç–≤–µ—Ç:', formResult);
    console.log('');

    // –¢–µ—Å—Ç 3: –¢–µ—Å—Ç GET /form (–ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã)
    console.log('3Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã...');
    const getFormResponse = await fetch(`${API_BASE}/form`, {
      headers: {
        Authorization: 'Bearer test-token',
      },
    });

    const getFormResult = await getFormResponse.json();
    console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', getFormResponse.status);
    console.log('üìÑ –û—Ç–≤–µ—Ç:', getFormResult);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testFormAPI();
