#!/usr/bin/env node

// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Telegram –±–æ—Ç–∞
import TelegramBot from 'node-telegram-bot-api';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: join(__dirname, '../backend/env.backend') });

const botToken = process.env.TELEGRAM_TOKEN;
const botUsername = process.env.BOT_USERNAME;

console.log('ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –±–æ—Ç–∞');
console.log('=============================');
console.log(`–¢–æ–∫–µ–Ω: ${botToken ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
console.log(`–ò–º—è –±–æ—Ç–∞: @${botUsername}`);
console.log('');

if (!botToken) {
  console.error('‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const bot = new TelegramBot(botToken, { polling: false });

async function testBot() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ...');
    const botInfo = await bot.getMe();
    console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –ø–æ–ª—É—á–µ–Ω–∞:');
    console.log(`  - ID: ${botInfo.id}`);
    console.log(`  - –ò–º—è: ${botInfo.first_name}`);
    console.log(`  - Username: @${botInfo.username}`);
    console.log(
      `  - –ú–æ–∂–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–∞–º: ${botInfo.can_join_groups}`
    );
    console.log(
      `  - –ú–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å –≤—Å–µ –≥—Ä—É–ø–ø–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${botInfo.can_read_all_group_messages}`
    );
    console.log(
      `  - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç inline —Ä–µ–∂–∏–º: ${botInfo.supports_inline_queries}`
    );
    console.log('');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    console.log('üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook...');
    const webhookInfo = await bot.getWebhookInfo();
    console.log('‚úÖ Webhook –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:');
    console.log(`  - URL: ${webhookInfo.url || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
    console.log(
      `  - –û–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${webhookInfo.pending_update_count}`
    );
    console.log(
      `  - –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${webhookInfo.last_error_message || '–ù–µ—Ç –æ—à–∏–±–æ–∫'}`
    );
    console.log('');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞...');
    const commands = await bot.getMyCommands();
    console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:');
    commands.forEach((cmd) => {
      console.log(`  - /${cmd.command}: ${cmd.description}`);
    });
    console.log('');

    console.log('üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('');
    console.log('üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É /start');
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç');
    console.log('3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –Ω–∞ —Å–∞–π—Ç–µ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞:', error.message);
    if (error.response) {
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response.data);
    }
  } finally {
    process.exit(0);
  }
}

testBot();
