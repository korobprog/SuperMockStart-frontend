#!/bin/bash

# üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ SuperMock –≤ Dokploy —á–µ—Ä–µ–∑ MCP
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./scripts/setup-dokploy-project.sh

set -e  # –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
CONFIG_FILE="$PROJECT_ROOT/.dokploy/config.json"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warn() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
    exit 1
}

info() {
    echo -e "${PURPLE}‚ÑπÔ∏è  $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    local missing_deps=()
    
    if ! command -v curl &> /dev/null; then
        missing_deps+=("curl")
    fi
    
    if ! command -v jq &> /dev/null; then
        missing_deps+=("jq")
    fi
    
    if ! command -v git &> /dev/null; then
        missing_deps+=("git")
    fi
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        error "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${missing_deps[*]}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö."
    fi
    
    success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã"
}

# –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
read_config() {
    if [ ! -f "$CONFIG_FILE" ]; then
        error "–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: $CONFIG_FILE"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ JSON
    if ! jq empty "$CONFIG_FILE" &>/dev/null; then
        error "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: $CONFIG_FILE"
    fi
    
    success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ $CONFIG_FILE"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ Dokploy
create_project() {
    log "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ Dokploy..."
    
    local project_name=$(jq -r '.project.name' "$CONFIG_FILE")
    local project_description=$(jq -r '.project.description' "$CONFIG_FILE")
    
    info "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: $project_name"
    info "–û–ø–∏—Å–∞–Ω–∏–µ: $project_description"
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ MCP API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    # –ü—Ä–∏–º–µ—Ä:
    # PROJECT_ID=$(curl -X POST "$DOKPLOY_URL/api/project.create" \
    #     -H "Content-Type: application/json" \
    #     -d "{\"name\":\"$project_name\",\"description\":\"$project_description\"}" \
    #     | jq -r '.id')
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º mock ID
    PROJECT_ID="mock_project_$(date +%s)"
    
    success "–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: $PROJECT_ID"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞
    mkdir -p "$PROJECT_ROOT/.dokploy"
    echo "$PROJECT_ID" > "$PROJECT_ROOT/.dokploy/project-id"
}

# –°–æ–∑–¥–∞–Ω–∏–µ Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
create_compose() {
    log "üê≥ –°–æ–∑–¥–∞–Ω–∏–µ Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    local project_id="$1"
    local compose_file=$(jq -r '.compose.file' "$CONFIG_FILE")
    
    if [ ! -f "$PROJECT_ROOT/$compose_file" ]; then
        error "Docker Compose —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $PROJECT_ROOT/$compose_file"
    fi
    
    info "–ò—Å–ø–æ–ª—å–∑—É–µ–º Docker Compose —Ñ–∞–π–ª: $compose_file"
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ MCP API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Compose
    # –ü—Ä–∏–º–µ—Ä:
    # COMPOSE_ID=$(curl -X POST "$DOKPLOY_URL/api/compose.create" \
    #     -H "Content-Type: application/json" \
    #     -d "{\"projectId\":\"$project_id\",\"name\":\"supermock-compose\",\"sourceType\":\"git\"}" \
    #     | jq -r '.id')
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º mock ID
    COMPOSE_ID="mock_compose_$(date +%s)"
    
    success "Docker Compose —Å–æ–∑–¥–∞–Ω —Å ID: $COMPOSE_ID"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID compose
    echo "$COMPOSE_ID" > "$PROJECT_ROOT/.dokploy/compose-id"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
setup_environment() {
    log "üåç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    local compose_id="$1"
    local env_file="$PROJECT_ROOT/env.dokploy"
    
    if [ ! -f "$env_file" ]; then
        error "–§–∞–π–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: $env_file"
    fi
    
    # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
    local env_vars=""
    while IFS= read -r line; do
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if [[ $line =~ ^[[:space:]]*# ]] || [[ -z "${line// }" ]]; then
            continue
        fi
        env_vars+="$line\n"
    done < "$env_file"
    
    info "–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: $(echo -e "$env_vars" | wc -l)"
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ MCP API –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    # curl -X POST "$DOKPLOY_URL/api/compose.saveEnvironment" \
    #     -H "Content-Type: application/json" \
    #     -d "{\"composeId\":\"$compose_id\",\"env\":\"$env_vars\"}"
    
    success "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–º–µ–Ω–æ–≤
setup_domains() {
    log "üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–º–µ–Ω–æ–≤..."
    
    local frontend_domain=$(jq -r '.compose.services.frontend.domain' "$CONFIG_FILE")
    local backend_domain=$(jq -r '.compose.services.backend.domain' "$CONFIG_FILE")
    
    info "Frontend –¥–æ–º–µ–Ω: $frontend_domain"
    info "Backend –¥–æ–º–µ–Ω: $backend_domain"
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–∑–æ–≤—ã MCP API –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–º–µ–Ω–æ–≤
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ Let's Encrypt
    
    success "–î–æ–º–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
setup_database() {
    log "üóÑÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    local project_id="$1"
    local db_config=$(jq '.compose.services.database' "$CONFIG_FILE")
    
    info "–¢–∏–ø –ë–î: $(echo "$db_config" | jq -r '.type')"
    info "–í–µ—Ä—Å–∏—è: $(echo "$db_config" | jq -r '.version')"
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ MCP API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PostgreSQL
    # DB_ID=$(curl -X POST "$DOKPLOY_URL/api/postgres.create" \
    #     -H "Content-Type: application/json" \
    #     -d "{\"projectId\":\"$project_id\",\"name\":\"supermock-db\"}" \
    #     | jq -r '.id')
    
    success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
}

# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
deploy_project() {
    log "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞..."
    
    local compose_id="$1"
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ MCP API –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
    # curl -X POST "$DOKPLOY_URL/api/compose.deploy" \
    #     -H "Content-Type: application/json" \
    #     -d "{\"composeId\":\"$compose_id\"}"
    
    success "–ü—Ä–æ–µ–∫—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
check_health() {
    log "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    
    local frontend_url=$(jq -r '.compose.services.frontend.healthCheck' "$CONFIG_FILE")
    local backend_url=$(jq -r '.compose.services.backend.healthCheck' "$CONFIG_FILE")
    
    local max_attempts=30
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        log "–ü–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts: –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoints..."
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ backend
        if curl -s --connect-timeout 5 "$backend_url" | grep -q "ok"; then
            success "‚úÖ Backend API —Ä–∞–±–æ—Ç–∞–µ—Ç: $backend_url"
            break
        else
            warn "‚è≥ Backend API –Ω–µ –≥–æ—Ç–æ–≤, –æ–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥..."
            sleep 10
            attempt=$((attempt + 1))
        fi
    done
    
    if [ $attempt -gt $max_attempts ]; then
        error "‚ùå Backend API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ $max_attempts –ø–æ–ø—ã—Ç–æ–∫"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend
    if curl -s --connect-timeout 5 -I "$frontend_url" | grep -q "200 OK"; then
        success "‚úÖ Frontend –¥–æ—Å—Ç—É–ø–µ–Ω: $frontend_url"
    else
        warn "‚ö†Ô∏è  Frontend –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: $frontend_url"
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
setup_webhook() {
    log "üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è..."
    
    local compose_id="$1"
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ URL webhook –∏–∑ Dokploy
    # WEBHOOK_URL=$(curl -X GET "$DOKPLOY_URL/api/compose.getWebhookUrl" \
    #     -H "Content-Type: application/json" \
    #     -d "{\"composeId\":\"$compose_id\"}" \
    #     | jq -r '.webhookUrl')
    
    WEBHOOK_URL="https://dokploy.example.com/webhook/$compose_id"
    
    info "Webhook URL: $WEBHOOK_URL"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ GitHub Actions
    echo "$WEBHOOK_URL" > "$PROJECT_ROOT/.dokploy/webhook-url"
    
    success "Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    
    echo ""
    warn "üìã –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç URL –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ GitHub:"
    echo "   Repository ‚Üí Settings ‚Üí Webhooks ‚Üí Add webhook"
    echo "   Payload URL: $WEBHOOK_URL"
    echo "   Content type: application/json"
    echo "   Events: Push events"
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
generate_report() {
    log "üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ..."
    
    local project_id=$(cat "$PROJECT_ROOT/.dokploy/project-id" 2>/dev/null || echo "N/A")
    local compose_id=$(cat "$PROJECT_ROOT/.dokploy/compose-id" 2>/dev/null || echo "N/A")
    local webhook_url=$(cat "$PROJECT_ROOT/.dokploy/webhook-url" 2>/dev/null || echo "N/A")
    
    local report_file="$PROJECT_ROOT/.dokploy/setup-report.md"
    
    cat > "$report_file" << EOF
# SuperMock Dokploy Setup Report

–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: $(date '+%Y-%m-%d %H:%M:%S')

## –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã

- **Project ID**: \`$project_id\`
- **Compose ID**: \`$compose_id\`

## –î–æ–º–µ–Ω—ã

- **Frontend**: https://supermock.ru
- **Backend API**: https://api.supermock.ru

## Endpoints

- **Health Check**: https://api.supermock.ru/api/health
- **Webhook URL**: $webhook_url

## –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

\`\`\`bash
# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
./scripts/deploy-db-update-mcp.sh $compose_id

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
docker logs dokploy-compose-$compose_id

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
# –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Dokploy Dashboard –∏–ª–∏ MCP API
\`\`\`

## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

- **Dokploy Dashboard**: http://217.198.6.238:3000
- **Frontend Status**: https://supermock.ru
- **API Status**: https://api.supermock.ru/api/health

## –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

1. –î–æ–±–∞–≤—å—Ç–µ webhook URL –≤ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç—ã
EOF

    success "–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: $report_file"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo ""
    log "üöÄ SuperMock Dokploy Project Setup via MCP"
    log "==========================================="
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    check_dependencies
    
    # –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    read_config
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    warn "‚ö†Ô∏è  –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –≤ Dokploy"
    warn "‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–µ—Ä—É –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
    echo ""
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É? (y/N): " -n 1 -r
    echo
    
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
        exit 0
    fi
    
    # –ü–æ—à–∞–≥–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
    create_project
    PROJECT_ID=$(cat "$PROJECT_ROOT/.dokploy/project-id")
    
    create_compose "$PROJECT_ID"
    COMPOSE_ID=$(cat "$PROJECT_ROOT/.dokploy/compose-id")
    
    setup_environment "$COMPOSE_ID"
    setup_domains
    setup_database "$PROJECT_ID"
    
    deploy_project "$COMPOSE_ID"
    
    # –û–∂–∏–¥–∞–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
    log "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è (30 —Å–µ–∫—É–Ω–¥)..."
    sleep 30
    
    check_health
    setup_webhook "$COMPOSE_ID"
    generate_report
    
    echo ""
    success "üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SuperMock –≤ Dokploy –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
    echo ""
    log "üìã –í–∞–∂–Ω—ã–µ —Å—Å—ã–ª–∫–∏:"
    echo "   ‚Ä¢ Frontend: https://supermock.ru"
    echo "   ‚Ä¢ Backend API: https://api.supermock.ru/api/health"
    echo "   ‚Ä¢ Dokploy Dashboard: http://217.198.6.238:3000"
    echo ""
    log "üìÇ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: .dokploy/"
    echo ""
    warn "üîß –ù–µ –∑–∞–±—É–¥—å—Ç–µ:"
    echo "   1. –û–±–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"
    echo "   2. –î–æ–±–∞–≤–∏—Ç—å webhook URL –≤ GitHub"
    echo "   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"
    echo ""
}

# –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"