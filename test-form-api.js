// –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API —Ñ–æ—Ä–º—ã
// –ó–∞–ø—É—Å–∫: node test-form-api.js

const API_BASE = 'http://localhost:3000/api';

// –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–∑ localStorage –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram
const TEST_TOKEN = 'your-telegram-token-here';

async function testFormAPI() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Ñ–æ—Ä–º—ã...\n');

  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  const formData = {
    profession: 'frontend-developer',
    country: 'RU',
    experience: '1-3',
    email: 'test@example.com',
    phone: '+7 (999) 123-45-67',
  };

  try {
    // –¢–µ—Å—Ç 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
    console.log('üì§ –¢–µ—Å—Ç 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã');
    const saveResponse = await fetch(`${API_BASE}/form`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${TEST_TOKEN}`,
      },
      body: JSON.stringify(formData),
    });

    console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', saveResponse.status);

    if (saveResponse.ok) {
      const saveResult = await saveResponse.json();
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', saveResult);
    } else {
      const errorData = await saveResponse.json();
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', errorData);
    }

    console.log('\n' + '='.repeat(50) + '\n');

    // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
    console.log('üì• –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã');
    const getResponse = await fetch(`${API_BASE}/form`, {
      method: 'GET',
      headers: {
        Authorization: `Bearer ${TEST_TOKEN}`,
      },
    });

    console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', getResponse.status);

    if (getResponse.ok) {
      const getResult = await getResponse.json();
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã:', getResult);
    } else {
      const errorData = await getResponse.json();
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è:', errorData);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testFormAPI();
